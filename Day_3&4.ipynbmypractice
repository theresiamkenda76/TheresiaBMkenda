{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/theresiamkenda76/TheresiaBMkenda/blob/main/Day_3%264.ipynbmypractice\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "id": "lYqV0mLzG5qJ"
      },
      "outputs": [],
      "source": [
        "# Understand Pandas DataFrames:--TODO\n",
        "#->create toy pd.DataFrame and operations"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Import dependencies\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n"
      ],
      "metadata": {
        "id": "GAtnT3aRG_Ug"
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Define numpy array using List\n",
        "A1: np.ndarray = np.array([1,2,3,4])"
      ],
      "metadata": {
        "id": "i8UAGDxnHU7u"
      },
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "A1"
      ],
      "metadata": {
        "id": "rTytwRY3z2Ry",
        "outputId": "37946074-65a6-493f-c35c-94c14bcdf13c",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([1, 2, 3, 4])"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "A1.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Egt_DExZHb7t",
        "outputId": "74e200c6-d44c-471a-e714-13c1d0e8521e"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(4,)"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "A2 = list(A1) # Convert back to a list"
      ],
      "metadata": {
        "id": "G-sOmUrsHezE"
      },
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "A2"
      ],
      "metadata": {
        "id": "HFL3UqgS0Ar-",
        "outputId": "05fe169c-ef3b-4afd-bf1a-58690fc0f59a",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[np.int64(1), np.int64(2), np.int64(3), np.int64(4)]"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Create multi-dimensional array\n",
        "arr1 =np.array([[1,2,3], [2,3,4]])"
      ],
      "metadata": {
        "id": "5_fmrTx-HkoH"
      },
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "arr1"
      ],
      "metadata": {
        "id": "KhFmbqt90Ldb",
        "outputId": "4ab1b87a-07de-4d74-c1cf-7d803157a019",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[1, 2, 3],\n",
              "       [2, 3, 4]])"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "arr1.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ALDwEUA9Hq5F",
        "outputId": "22f58a20-4b04-4b72-dc9b-26140a544081"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(2, 3)"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Maths operations in np.arrays\n",
        "arr2 = np.array([1,2,4])\n",
        "C = arr1 @ arr2 # (2, 3) @ (3,)\n"
      ],
      "metadata": {
        "id": "1QXmgvvbHs-a"
      },
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "arr2 = np.array([1,2,4])"
      ],
      "metadata": {
        "id": "miB2t6Pm0jM5"
      },
      "execution_count": 14,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "arr2"
      ],
      "metadata": {
        "id": "lV8wusub0rwy",
        "outputId": "01357413-aec1-49fa-db29-a8174e6fabf3",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([1, 2, 4])"
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "C = arr1 @ arr2 # (2, 3) @ (3,)"
      ],
      "metadata": {
        "id": "YWaGDKNb0yVf"
      },
      "execution_count": 16,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "C"
      ],
      "metadata": {
        "id": "kcx_OZqk07wK",
        "outputId": "7127fb9f-2be8-4a44-ed7d-73cf1caf4b35",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([17, 24])"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Define an array using numpy functionalities\n",
        "A1 = np.linspace(0, 10,100) # 100 numbers btn 0 and 1"
      ],
      "metadata": {
        "id": "dURzL9LbH4hA"
      },
      "execution_count": 18,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "A1"
      ],
      "metadata": {
        "id": "ibtTLon71Rfz",
        "outputId": "6840e736-da58-4464-e700-bfc3516649a1",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([ 0.        ,  0.1010101 ,  0.2020202 ,  0.3030303 ,  0.4040404 ,\n",
              "        0.50505051,  0.60606061,  0.70707071,  0.80808081,  0.90909091,\n",
              "        1.01010101,  1.11111111,  1.21212121,  1.31313131,  1.41414141,\n",
              "        1.51515152,  1.61616162,  1.71717172,  1.81818182,  1.91919192,\n",
              "        2.02020202,  2.12121212,  2.22222222,  2.32323232,  2.42424242,\n",
              "        2.52525253,  2.62626263,  2.72727273,  2.82828283,  2.92929293,\n",
              "        3.03030303,  3.13131313,  3.23232323,  3.33333333,  3.43434343,\n",
              "        3.53535354,  3.63636364,  3.73737374,  3.83838384,  3.93939394,\n",
              "        4.04040404,  4.14141414,  4.24242424,  4.34343434,  4.44444444,\n",
              "        4.54545455,  4.64646465,  4.74747475,  4.84848485,  4.94949495,\n",
              "        5.05050505,  5.15151515,  5.25252525,  5.35353535,  5.45454545,\n",
              "        5.55555556,  5.65656566,  5.75757576,  5.85858586,  5.95959596,\n",
              "        6.06060606,  6.16161616,  6.26262626,  6.36363636,  6.46464646,\n",
              "        6.56565657,  6.66666667,  6.76767677,  6.86868687,  6.96969697,\n",
              "        7.07070707,  7.17171717,  7.27272727,  7.37373737,  7.47474747,\n",
              "        7.57575758,  7.67676768,  7.77777778,  7.87878788,  7.97979798,\n",
              "        8.08080808,  8.18181818,  8.28282828,  8.38383838,  8.48484848,\n",
              "        8.58585859,  8.68686869,  8.78787879,  8.88888889,  8.98989899,\n",
              "        9.09090909,  9.19191919,  9.29292929,  9.39393939,  9.49494949,\n",
              "        9.5959596 ,  9.6969697 ,  9.7979798 ,  9.8989899 , 10.        ])"
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Reshaping numpy array\n",
        "A2 = A1.reshape(50, 2)"
      ],
      "metadata": {
        "id": "qILamqaCICDA"
      },
      "execution_count": 20,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "A2"
      ],
      "metadata": {
        "id": "bITaWIim1iOz",
        "outputId": "2a90d794-8d77-4974-ae72-2d1ba1b4a505",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[ 0.        ,  0.1010101 ],\n",
              "       [ 0.2020202 ,  0.3030303 ],\n",
              "       [ 0.4040404 ,  0.50505051],\n",
              "       [ 0.60606061,  0.70707071],\n",
              "       [ 0.80808081,  0.90909091],\n",
              "       [ 1.01010101,  1.11111111],\n",
              "       [ 1.21212121,  1.31313131],\n",
              "       [ 1.41414141,  1.51515152],\n",
              "       [ 1.61616162,  1.71717172],\n",
              "       [ 1.81818182,  1.91919192],\n",
              "       [ 2.02020202,  2.12121212],\n",
              "       [ 2.22222222,  2.32323232],\n",
              "       [ 2.42424242,  2.52525253],\n",
              "       [ 2.62626263,  2.72727273],\n",
              "       [ 2.82828283,  2.92929293],\n",
              "       [ 3.03030303,  3.13131313],\n",
              "       [ 3.23232323,  3.33333333],\n",
              "       [ 3.43434343,  3.53535354],\n",
              "       [ 3.63636364,  3.73737374],\n",
              "       [ 3.83838384,  3.93939394],\n",
              "       [ 4.04040404,  4.14141414],\n",
              "       [ 4.24242424,  4.34343434],\n",
              "       [ 4.44444444,  4.54545455],\n",
              "       [ 4.64646465,  4.74747475],\n",
              "       [ 4.84848485,  4.94949495],\n",
              "       [ 5.05050505,  5.15151515],\n",
              "       [ 5.25252525,  5.35353535],\n",
              "       [ 5.45454545,  5.55555556],\n",
              "       [ 5.65656566,  5.75757576],\n",
              "       [ 5.85858586,  5.95959596],\n",
              "       [ 6.06060606,  6.16161616],\n",
              "       [ 6.26262626,  6.36363636],\n",
              "       [ 6.46464646,  6.56565657],\n",
              "       [ 6.66666667,  6.76767677],\n",
              "       [ 6.86868687,  6.96969697],\n",
              "       [ 7.07070707,  7.17171717],\n",
              "       [ 7.27272727,  7.37373737],\n",
              "       [ 7.47474747,  7.57575758],\n",
              "       [ 7.67676768,  7.77777778],\n",
              "       [ 7.87878788,  7.97979798],\n",
              "       [ 8.08080808,  8.18181818],\n",
              "       [ 8.28282828,  8.38383838],\n",
              "       [ 8.48484848,  8.58585859],\n",
              "       [ 8.68686869,  8.78787879],\n",
              "       [ 8.88888889,  8.98989899],\n",
              "       [ 9.09090909,  9.19191919],\n",
              "       [ 9.29292929,  9.39393939],\n",
              "       [ 9.49494949,  9.5959596 ],\n",
              "       [ 9.6969697 ,  9.7979798 ],\n",
              "       [ 9.8989899 , 10.        ]])"
            ]
          },
          "metadata": {},
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Transposing\n",
        "A3 = A2.transpose(1, 0)"
      ],
      "metadata": {
        "id": "5dDDiAnWINrF"
      },
      "execution_count": 22,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "A3"
      ],
      "metadata": {
        "id": "RSahWpkx1vIS",
        "outputId": "7dbe8188-8f70-45dd-dd38-c1e6dda01038",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[ 0.        ,  0.2020202 ,  0.4040404 ,  0.60606061,  0.80808081,\n",
              "         1.01010101,  1.21212121,  1.41414141,  1.61616162,  1.81818182,\n",
              "         2.02020202,  2.22222222,  2.42424242,  2.62626263,  2.82828283,\n",
              "         3.03030303,  3.23232323,  3.43434343,  3.63636364,  3.83838384,\n",
              "         4.04040404,  4.24242424,  4.44444444,  4.64646465,  4.84848485,\n",
              "         5.05050505,  5.25252525,  5.45454545,  5.65656566,  5.85858586,\n",
              "         6.06060606,  6.26262626,  6.46464646,  6.66666667,  6.86868687,\n",
              "         7.07070707,  7.27272727,  7.47474747,  7.67676768,  7.87878788,\n",
              "         8.08080808,  8.28282828,  8.48484848,  8.68686869,  8.88888889,\n",
              "         9.09090909,  9.29292929,  9.49494949,  9.6969697 ,  9.8989899 ],\n",
              "       [ 0.1010101 ,  0.3030303 ,  0.50505051,  0.70707071,  0.90909091,\n",
              "         1.11111111,  1.31313131,  1.51515152,  1.71717172,  1.91919192,\n",
              "         2.12121212,  2.32323232,  2.52525253,  2.72727273,  2.92929293,\n",
              "         3.13131313,  3.33333333,  3.53535354,  3.73737374,  3.93939394,\n",
              "         4.14141414,  4.34343434,  4.54545455,  4.74747475,  4.94949495,\n",
              "         5.15151515,  5.35353535,  5.55555556,  5.75757576,  5.95959596,\n",
              "         6.16161616,  6.36363636,  6.56565657,  6.76767677,  6.96969697,\n",
              "         7.17171717,  7.37373737,  7.57575758,  7.77777778,  7.97979798,\n",
              "         8.18181818,  8.38383838,  8.58585859,  8.78787879,  8.98989899,\n",
              "         9.19191919,  9.39393939,  9.5959596 ,  9.7979798 , 10.        ]])"
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Using random function in np\n"
      ],
      "metadata": {
        "id": "35RW-HQSISFH"
      },
      "execution_count": 24,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "A = np.random.randint(0, 255, 900)"
      ],
      "metadata": {
        "id": "0U0mTGxcIYkt"
      },
      "execution_count": 25,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "A"
      ],
      "metadata": {
        "id": "UZAy8-MI2KuF",
        "outputId": "6af16d5e-84ba-44d8-d070-ec6a2fb9cd55",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([150, 198, 155, 172, 221,  95,  72, 205, 102,  50, 164, 140, 249,\n",
              "       204, 170, 239, 186, 208,  28,  65, 108, 169, 218,  12, 157, 106,\n",
              "       142, 163, 133,  49,  97,  73,  97, 195, 114, 148, 153,  12, 133,\n",
              "       194, 223, 120,   8, 132, 130,  89,   1, 169,  27,  60,  64, 113,\n",
              "       146,  71,  53, 125,  54,  60,   0, 186, 142,  93, 193,  91, 179,\n",
              "       215, 196, 181,  57,  57, 246, 203,  63, 249, 234, 185, 111, 202,\n",
              "        28,  17,  32, 186, 158, 175, 247,  92, 171,  28,  61,  47, 155,\n",
              "       232, 211, 133, 135, 205, 181, 131, 127, 253,  68, 223,  58,  53,\n",
              "       163,  61,  84, 200, 213, 234, 124, 158, 164,  37,   1, 153, 232,\n",
              "        85, 153,  66,  79,  17, 109, 172, 110,   5, 142,  16,  12, 197,\n",
              "       115,  97,  54,  63, 102, 118,  80,  22, 245,  91, 226, 120,  29,\n",
              "        45,   0,  91,  48, 216,  76, 150, 169,  16, 100,   4, 215, 149,\n",
              "       217,  76, 239, 126, 102,  74,  52,  38, 249,   3,  81,  46,   6,\n",
              "       175,  89, 131, 150, 237, 181,   5, 159,  41, 133,  16, 246, 218,\n",
              "        11, 248, 173, 238,  13, 171, 114, 252,   0,  41,  24, 217, 185,\n",
              "       185,  45, 174, 196, 225, 107,  65, 210,  70, 127,   4, 157, 112,\n",
              "       217,  72, 198, 126,  15,  19, 245, 198,  90, 147, 200, 213,  22,\n",
              "       205, 150, 188, 251, 174, 110,  69, 115, 232,  63,  24, 106,  26,\n",
              "       201,  27, 129, 124, 170, 248, 178,   5, 246,  87,  74, 137, 132,\n",
              "       141,  91, 170,  36,  86,  43, 236,  96, 198, 224, 134,  20, 204,\n",
              "        71, 137, 102, 123,  97, 219,  17,  10,  68, 182,  77,  28, 175,\n",
              "        19,  17,  54,  15, 132,   3,  89, 180, 201,  46,  23, 241, 108,\n",
              "         6, 185, 181, 161,  79, 230,  81, 163,  78, 140, 103,  31,  12,\n",
              "       189,  57, 198,  80, 175, 200,  16,  64, 231, 118,  44,  35,  41,\n",
              "       102,  96, 167, 195, 201,  64, 210, 230, 215,   1,  81, 210, 139,\n",
              "        24, 125, 233, 200, 251, 165,  31,  31, 247,   4, 206, 100, 112,\n",
              "       169,  79, 239, 254, 129, 169, 208,  24, 180,   8,  67, 181, 240,\n",
              "       167, 164, 166, 130, 157,  73, 240, 176, 213, 182,  83, 104,  40,\n",
              "       128, 181,  22, 144, 235,  37, 235,  12, 198, 173,   5, 169,  84,\n",
              "        22, 180,   8, 169,   6, 109, 180, 140, 248, 154,   7,  84,  19,\n",
              "        45, 108,  88,   8,  88, 195, 201, 194,  63, 235, 113,  42, 168,\n",
              "        82,  12, 122, 232, 119, 232,  39,  28,  64, 167, 201, 101, 143,\n",
              "       150,  49,   5, 235, 108,  14,  13, 161, 119, 175,  70,  93, 180,\n",
              "       249, 209,  76, 160, 151, 105, 167,  58,  25, 228, 188,   9, 238,\n",
              "       171, 163, 152, 103,  86,  26,   6, 128,  69, 188,  14, 235,  46,\n",
              "       251, 164,  76,   4, 147,  61, 172, 253, 209, 237, 243,  46,   7,\n",
              "       158,  19, 254,  87,  48,  40, 179, 154,  99, 150, 197, 138, 162,\n",
              "        90, 161, 184, 253, 164,   1, 237, 198,  22,  59, 251, 170,  64,\n",
              "        81, 116,  55, 128, 162,  44, 185, 180,  30,  39, 113, 180, 253,\n",
              "        44,  77, 126, 209, 124, 198, 203,  36,  67,  19,  17, 198,  16,\n",
              "        97, 190, 100,  52,  77, 101, 251, 250, 171, 182,  63, 127,   4,\n",
              "        89, 193, 221, 163, 121,  40,  92,   3, 225,  76,  38, 164, 183,\n",
              "       185, 101, 159, 167, 252, 229,  68,   8, 213, 176,  26,  42, 233,\n",
              "        67, 129, 227, 193,  55,  62, 201,  86, 102, 170,  20, 123,  45,\n",
              "       193, 214,  42, 236,  44, 118, 155, 169, 191,  38,  77, 154,  17,\n",
              "       156, 116, 246,   5,  69, 228, 103, 206, 148, 147,  40,  36,  97,\n",
              "         1,  52,  11, 163,  86, 242, 101, 120, 231,  48,   5, 182,  18,\n",
              "        86, 254,  86, 232, 182, 212, 156, 187, 156, 168,  80,  55,  44,\n",
              "       185,  86, 230,  11, 122, 187, 173, 189,  78, 148, 189,  72,  63,\n",
              "        10, 143,  83,  64, 198,  28, 144, 159, 164, 155, 207, 111, 160,\n",
              "        86, 109, 174, 206, 151,  23, 164, 156, 179,  76, 216, 175, 154,\n",
              "       159, 160, 128, 214,  32, 116, 198, 170, 195, 152, 195, 232,  12,\n",
              "       196,  32, 208,  27,  11,  50, 234, 175,  35,  79,  81,  93,  84,\n",
              "        65, 168,  94,  47,  53, 148,  83, 251,  44, 228,  51, 241, 194,\n",
              "       111, 164, 157, 168, 103, 112,   7,  81,  37,  91,  94, 128,  67,\n",
              "        15, 184,   2,  49, 165, 187, 238, 222, 151,  18, 249, 159, 223,\n",
              "       245, 183,  99,  39, 214,   2, 224, 121,  89,  42,  92,  14,  83,\n",
              "       230,  22, 237, 165,   7, 104, 193, 219,  74,   0, 153, 141, 203,\n",
              "       135, 135, 200,  98, 226, 213, 154, 173,  18, 111, 249,  31,  50,\n",
              "       229,  47,  97, 105, 226, 234, 249, 170, 112,  26, 150, 198,  12,\n",
              "         6, 122, 109, 219, 138,  29, 153, 248, 162,  98, 181,  66,  27,\n",
              "       153, 246, 115,   3, 175, 217,  82,  64,  21, 104,  29,  11, 194,\n",
              "        61, 138,  25,  81,  54, 200, 216,  66, 181, 143,   6, 157,  91,\n",
              "        20,  69, 254,  10, 242, 124, 132, 120, 191, 224,  10,  94, 144,\n",
              "       188,  66,  15,  40,  74, 130, 227,  82,  28,   7, 101,  45,  92,\n",
              "       176, 161, 193, 147, 165, 189,  70, 144, 113, 206,  59, 235, 192,\n",
              "        96, 138, 113, 146, 225,  88, 174,  35, 115,  36, 205, 103, 110,\n",
              "        19,  21,  14, 219,  95,  87, 118,  25, 244, 189,  48,  91, 203,\n",
              "       236, 173, 254,  62, 250,  86,  25, 140, 242,  22, 162,  60,  47,\n",
              "       196,  39,  26])"
            ]
          },
          "metadata": {},
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Reshaping and plot\n",
        "B = A.reshape(30,30)"
      ],
      "metadata": {
        "id": "CnDf_tmiIfEy"
      },
      "execution_count": 27,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "B"
      ],
      "metadata": {
        "id": "oXrUMwTY2YUb",
        "outputId": "73fc9cb0-f08f-4519-bcd2-8d7709b00c6e",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[150, 198, 155, 172, 221,  95,  72, 205, 102,  50, 164, 140, 249,\n",
              "        204, 170, 239, 186, 208,  28,  65, 108, 169, 218,  12, 157, 106,\n",
              "        142, 163, 133,  49],\n",
              "       [ 97,  73,  97, 195, 114, 148, 153,  12, 133, 194, 223, 120,   8,\n",
              "        132, 130,  89,   1, 169,  27,  60,  64, 113, 146,  71,  53, 125,\n",
              "         54,  60,   0, 186],\n",
              "       [142,  93, 193,  91, 179, 215, 196, 181,  57,  57, 246, 203,  63,\n",
              "        249, 234, 185, 111, 202,  28,  17,  32, 186, 158, 175, 247,  92,\n",
              "        171,  28,  61,  47],\n",
              "       [155, 232, 211, 133, 135, 205, 181, 131, 127, 253,  68, 223,  58,\n",
              "         53, 163,  61,  84, 200, 213, 234, 124, 158, 164,  37,   1, 153,\n",
              "        232,  85, 153,  66],\n",
              "       [ 79,  17, 109, 172, 110,   5, 142,  16,  12, 197, 115,  97,  54,\n",
              "         63, 102, 118,  80,  22, 245,  91, 226, 120,  29,  45,   0,  91,\n",
              "         48, 216,  76, 150],\n",
              "       [169,  16, 100,   4, 215, 149, 217,  76, 239, 126, 102,  74,  52,\n",
              "         38, 249,   3,  81,  46,   6, 175,  89, 131, 150, 237, 181,   5,\n",
              "        159,  41, 133,  16],\n",
              "       [246, 218,  11, 248, 173, 238,  13, 171, 114, 252,   0,  41,  24,\n",
              "        217, 185, 185,  45, 174, 196, 225, 107,  65, 210,  70, 127,   4,\n",
              "        157, 112, 217,  72],\n",
              "       [198, 126,  15,  19, 245, 198,  90, 147, 200, 213,  22, 205, 150,\n",
              "        188, 251, 174, 110,  69, 115, 232,  63,  24, 106,  26, 201,  27,\n",
              "        129, 124, 170, 248],\n",
              "       [178,   5, 246,  87,  74, 137, 132, 141,  91, 170,  36,  86,  43,\n",
              "        236,  96, 198, 224, 134,  20, 204,  71, 137, 102, 123,  97, 219,\n",
              "         17,  10,  68, 182],\n",
              "       [ 77,  28, 175,  19,  17,  54,  15, 132,   3,  89, 180, 201,  46,\n",
              "         23, 241, 108,   6, 185, 181, 161,  79, 230,  81, 163,  78, 140,\n",
              "        103,  31,  12, 189],\n",
              "       [ 57, 198,  80, 175, 200,  16,  64, 231, 118,  44,  35,  41, 102,\n",
              "         96, 167, 195, 201,  64, 210, 230, 215,   1,  81, 210, 139,  24,\n",
              "        125, 233, 200, 251],\n",
              "       [165,  31,  31, 247,   4, 206, 100, 112, 169,  79, 239, 254, 129,\n",
              "        169, 208,  24, 180,   8,  67, 181, 240, 167, 164, 166, 130, 157,\n",
              "         73, 240, 176, 213],\n",
              "       [182,  83, 104,  40, 128, 181,  22, 144, 235,  37, 235,  12, 198,\n",
              "        173,   5, 169,  84,  22, 180,   8, 169,   6, 109, 180, 140, 248,\n",
              "        154,   7,  84,  19],\n",
              "       [ 45, 108,  88,   8,  88, 195, 201, 194,  63, 235, 113,  42, 168,\n",
              "         82,  12, 122, 232, 119, 232,  39,  28,  64, 167, 201, 101, 143,\n",
              "        150,  49,   5, 235],\n",
              "       [108,  14,  13, 161, 119, 175,  70,  93, 180, 249, 209,  76, 160,\n",
              "        151, 105, 167,  58,  25, 228, 188,   9, 238, 171, 163, 152, 103,\n",
              "         86,  26,   6, 128],\n",
              "       [ 69, 188,  14, 235,  46, 251, 164,  76,   4, 147,  61, 172, 253,\n",
              "        209, 237, 243,  46,   7, 158,  19, 254,  87,  48,  40, 179, 154,\n",
              "         99, 150, 197, 138],\n",
              "       [162,  90, 161, 184, 253, 164,   1, 237, 198,  22,  59, 251, 170,\n",
              "         64,  81, 116,  55, 128, 162,  44, 185, 180,  30,  39, 113, 180,\n",
              "        253,  44,  77, 126],\n",
              "       [209, 124, 198, 203,  36,  67,  19,  17, 198,  16,  97, 190, 100,\n",
              "         52,  77, 101, 251, 250, 171, 182,  63, 127,   4,  89, 193, 221,\n",
              "        163, 121,  40,  92],\n",
              "       [  3, 225,  76,  38, 164, 183, 185, 101, 159, 167, 252, 229,  68,\n",
              "          8, 213, 176,  26,  42, 233,  67, 129, 227, 193,  55,  62, 201,\n",
              "         86, 102, 170,  20],\n",
              "       [123,  45, 193, 214,  42, 236,  44, 118, 155, 169, 191,  38,  77,\n",
              "        154,  17, 156, 116, 246,   5,  69, 228, 103, 206, 148, 147,  40,\n",
              "         36,  97,   1,  52],\n",
              "       [ 11, 163,  86, 242, 101, 120, 231,  48,   5, 182,  18,  86, 254,\n",
              "         86, 232, 182, 212, 156, 187, 156, 168,  80,  55,  44, 185,  86,\n",
              "        230,  11, 122, 187],\n",
              "       [173, 189,  78, 148, 189,  72,  63,  10, 143,  83,  64, 198,  28,\n",
              "        144, 159, 164, 155, 207, 111, 160,  86, 109, 174, 206, 151,  23,\n",
              "        164, 156, 179,  76],\n",
              "       [216, 175, 154, 159, 160, 128, 214,  32, 116, 198, 170, 195, 152,\n",
              "        195, 232,  12, 196,  32, 208,  27,  11,  50, 234, 175,  35,  79,\n",
              "         81,  93,  84,  65],\n",
              "       [168,  94,  47,  53, 148,  83, 251,  44, 228,  51, 241, 194, 111,\n",
              "        164, 157, 168, 103, 112,   7,  81,  37,  91,  94, 128,  67,  15,\n",
              "        184,   2,  49, 165],\n",
              "       [187, 238, 222, 151,  18, 249, 159, 223, 245, 183,  99,  39, 214,\n",
              "          2, 224, 121,  89,  42,  92,  14,  83, 230,  22, 237, 165,   7,\n",
              "        104, 193, 219,  74],\n",
              "       [  0, 153, 141, 203, 135, 135, 200,  98, 226, 213, 154, 173,  18,\n",
              "        111, 249,  31,  50, 229,  47,  97, 105, 226, 234, 249, 170, 112,\n",
              "         26, 150, 198,  12],\n",
              "       [  6, 122, 109, 219, 138,  29, 153, 248, 162,  98, 181,  66,  27,\n",
              "        153, 246, 115,   3, 175, 217,  82,  64,  21, 104,  29,  11, 194,\n",
              "         61, 138,  25,  81],\n",
              "       [ 54, 200, 216,  66, 181, 143,   6, 157,  91,  20,  69, 254,  10,\n",
              "        242, 124, 132, 120, 191, 224,  10,  94, 144, 188,  66,  15,  40,\n",
              "         74, 130, 227,  82],\n",
              "       [ 28,   7, 101,  45,  92, 176, 161, 193, 147, 165, 189,  70, 144,\n",
              "        113, 206,  59, 235, 192,  96, 138, 113, 146, 225,  88, 174,  35,\n",
              "        115,  36, 205, 103],\n",
              "       [110,  19,  21,  14, 219,  95,  87, 118,  25, 244, 189,  48,  91,\n",
              "        203, 236, 173, 254,  62, 250,  86,  25, 140, 242,  22, 162,  60,\n",
              "         47, 196,  39,  26]])"
            ]
          },
          "metadata": {},
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.imshow(B)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 430
        },
        "id": "VmTSC3v7IkJL",
        "outputId": "c4cba75b-3743-429f-84d8-9214e51151f9"
      },
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Simulate random normal noise\n",
        "cmb = np.random.randn(10000)"
      ],
      "metadata": {
        "id": "3i3WC4ozIo6y"
      },
      "execution_count": 30,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "cmb"
      ],
      "metadata": {
        "id": "MRhxOrm52yqq",
        "outputId": "703861b0-b1ec-49e2-fef0-df8233b93741",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([-0.08755475,  2.63262907,  1.25404121, ...,  0.47686728,\n",
              "       -0.45241303, -0.73057846])"
            ]
          },
          "metadata": {},
          "execution_count": 31
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Plot the noise\n",
        "cmb1 = cmb.reshape(100, 100)\n",
        "plt.imshow(cmb1*0.001)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 451
        },
        "id": "dDOupHtEIvNI",
        "outputId": "4e976146-3527-41fe-8ca9-34a5ea00c6e1"
      },
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.image.AxesImage at 0x7f4919c4b650>"
            ]
          },
          "metadata": {},
          "execution_count": 32
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Change a specific element\n",
        "A[0] = 0"
      ],
      "metadata": {
        "id": "OmpxB80bI7cZ"
      },
      "execution_count": 33,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "NEEzfJ9X3ON6"
      },
      "execution_count": 33,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Subseting np.array using colon operations\n",
        "cmb1[:10, :10]# Selecting first 10 rows and 10 cols"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OnAyhZyQJC_u",
        "outputId": "648814c2-ee7d-46da-a3a5-37aa84a976f8"
      },
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[-0.08755475,  2.63262907,  1.25404121,  1.19790248, -0.41080053,\n",
              "        -1.51218228, -2.93275913, -0.41924545,  0.42379615, -1.14320705],\n",
              "       [-0.64682326, -0.04362667,  1.29187995,  0.04447532,  0.52539246,\n",
              "         1.10054369,  0.62510386,  1.34048938,  0.30532946, -1.36564155],\n",
              "       [-1.06096007, -0.91408179, -0.96099917, -0.22253775,  1.07560345,\n",
              "         1.21599699,  1.02934492, -1.2261214 ,  0.71520588,  0.15013289],\n",
              "       [ 2.10282933, -0.54654597, -0.39032874,  0.70868551, -2.38001538,\n",
              "         0.39985335,  0.79161339,  1.23983916,  1.95481847, -0.99592298],\n",
              "       [ 0.24223011,  1.0286651 , -1.03384442,  1.22160079,  1.11899942,\n",
              "         0.8851984 , -0.2400978 , -0.49963115, -0.47627444,  0.21566848],\n",
              "       [-0.87166738,  0.67539648, -0.51068466, -1.45476574, -1.20018777,\n",
              "         0.38062525, -0.87220129,  0.77763431,  0.98478835, -0.06226223],\n",
              "       [ 0.63451491,  0.59754874, -0.22430339, -0.64153589, -0.11687235,\n",
              "        -1.04324901, -0.2000364 ,  1.35341714,  1.32093585,  0.98058235],\n",
              "       [-1.30748416, -1.49077923, -0.55458033, -0.9812158 ,  1.32531026,\n",
              "         0.46168385,  0.79270832,  0.97415955, -0.1489813 ,  1.17915841],\n",
              "       [ 1.49498057,  0.61535923,  1.93455251,  0.13815736,  0.06881301,\n",
              "         0.73640767,  0.70042277,  0.27964552,  1.24408858,  1.21379808],\n",
              "       [ 1.65048583, -0.97810386, -0.02840579,  0.67700184,  0.54543101,\n",
              "         0.94545852,  0.73550434,  1.76156936,  1.4241725 ,  1.77624623]])"
            ]
          },
          "metadata": {},
          "execution_count": 34
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Reshaping into multiple dimension and subseting- ina maana gani?\n",
        "cmb1.reshape(10, 10, 100)[:2, :1, :4]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Zt8SG4W_JOf7",
        "outputId": "248f423f-948b-4c40-b505-b8449c0c9dce"
      },
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[[-0.08755475,  2.63262907,  1.25404121,  1.19790248]],\n",
              "\n",
              "       [[ 0.24790446, -0.03112526, -0.39344875, -0.43109958]]])"
            ]
          },
          "metadata": {},
          "execution_count": 35
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Defining pandas dataframe using a list\n",
        "df = pd.DataFrame(data =\n",
        "                  [[1,2,3], [4,5,7],[10,30,33]], columns= [\"A\", \"B\",\"C\"])"
      ],
      "metadata": {
        "id": "aLwjxg79JVaz"
      },
      "execution_count": 36,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 143
        },
        "id": "Hmq-jyxHJdAa",
        "outputId": "2e16ce09-6a2b-45cb-8870-cf4319d786e1"
      },
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    A   B   C\n",
              "0   1   2   3\n",
              "1   4   5   7\n",
              "2  10  30  33"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d30c8464-5257-4f90-b423-6a0b411ccdfc\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>A</th>\n",
              "      <th>B</th>\n",
              "      <th>C</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>4</td>\n",
              "      <td>5</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>10</td>\n",
              "      <td>30</td>\n",
              "      <td>33</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d30c8464-5257-4f90-b423-6a0b411ccdfc')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-d30c8464-5257-4f90-b423-6a0b411ccdfc button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-d30c8464-5257-4f90-b423-6a0b411ccdfc');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-bcc7403f-1350-4fa3-8bde-7082a6a3f80e\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-bcc7403f-1350-4fa3-8bde-7082a6a3f80e')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-bcc7403f-1350-4fa3-8bde-7082a6a3f80e button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_59625d4f-4422-4a45-9f54-086ac881ed38\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_59625d4f-4422-4a45-9f54-086ac881ed38 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 3,\n  \"fields\": [\n    {\n      \"column\": \"A\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4,\n        \"min\": 1,\n        \"max\": 10,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          1,\n          4,\n          10\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"B\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 15,\n        \"min\": 2,\n        \"max\": 30,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          2,\n          5,\n          30\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"C\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 16,\n        \"min\": 3,\n        \"max\": 33,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          3,\n          7,\n          33\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 37
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Fetch the colomns\n",
        "cols = df.columns"
      ],
      "metadata": {
        "id": "ufslJ98_Jfk2"
      },
      "execution_count": 38,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "cols"
      ],
      "metadata": {
        "id": "1bY2o4Iv5yyu",
        "outputId": "be0154e1-e538-4bec-b267-7fe5925cb483",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['A', 'B', 'C'], dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 39
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Converting it into a list\n",
        "list(cols)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8hsC7V4nJlIU",
        "outputId": "71a185fc-d1a0-4970-a7c0-d52c0460fa8a"
      },
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['A', 'B', 'C']"
            ]
          },
          "metadata": {},
          "execution_count": 40
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Get the total number of samples\n",
        "len(df) # total obs"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4FikiZ38Jrha",
        "outputId": "cc8d8b0b-899f-4b0e-a693-90cb1177d9e0"
      },
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "3"
            ]
          },
          "metadata": {},
          "execution_count": 41
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Using dictionary to define Pandas dfm\n",
        "df2 = pd.DataFrame(data = {\"A\": [1,2,3], \"B\": [4,6,8],\"C\": [10,30,45]})"
      ],
      "metadata": {
        "id": "Eoy704OtJyeg"
      },
      "execution_count": 42,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df2"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 143
        },
        "id": "hqavQoGBJ4CE",
        "outputId": "4d9a1924-6682-4433-e010-49d530075ba3"
      },
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   A  B   C\n",
              "0  1  4  10\n",
              "1  2  6  30\n",
              "2  3  8  45"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-1b6d88a6-cff3-4b5f-9b4f-4b450653cb2c\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>A</th>\n",
              "      <th>B</th>\n",
              "      <th>C</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>6</td>\n",
              "      <td>30</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>8</td>\n",
              "      <td>45</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1b6d88a6-cff3-4b5f-9b4f-4b450653cb2c')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-1b6d88a6-cff3-4b5f-9b4f-4b450653cb2c button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-1b6d88a6-cff3-4b5f-9b4f-4b450653cb2c');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-01450c69-2c79-4757-8f6f-ea161cf15aab\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-01450c69-2c79-4757-8f6f-ea161cf15aab')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-01450c69-2c79-4757-8f6f-ea161cf15aab button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_367c5ee9-7eda-4356-86bf-fa19ffa1c540\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df2')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_367c5ee9-7eda-4356-86bf-fa19ffa1c540 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df2');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df2",
              "summary": "{\n  \"name\": \"df2\",\n  \"rows\": 3,\n  \"fields\": [\n    {\n      \"column\": \"A\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 3,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          1,\n          2,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"B\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 4,\n        \"max\": 8,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          4,\n          6,\n          8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"C\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 17,\n        \"min\": 10,\n        \"max\": 45,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          10,\n          30,\n          45\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 43
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df3 = pd.DataFrame(data = np.random.randn(100).reshape(50, 2),\n",
        "                   columns = [\"A\", \"B\"])"
      ],
      "metadata": {
        "id": "1pCqX-R9J-9t"
      },
      "execution_count": 44,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df3.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zcJyL_NKKEAK",
        "outputId": "a273fa70-ee43-47d5-c5d2-2ee233e7fc67"
      },
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(50, 2)"
            ]
          },
          "metadata": {},
          "execution_count": 45
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "display(df3.head(3))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 143
        },
        "id": "BTratX3jKHdX",
        "outputId": "deb17ce0-cc19-4e04-d85c-9af7e8302054"
      },
      "execution_count": 46,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "          A         B\n",
              "0 -0.854790 -1.523489\n",
              "1  0.674760  0.033543\n",
              "2  0.126282 -0.369242"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f322e85d-6197-4871-8a3a-8776e575e508\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>A</th>\n",
              "      <th>B</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>-0.854790</td>\n",
              "      <td>-1.523489</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.674760</td>\n",
              "      <td>0.033543</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.126282</td>\n",
              "      <td>-0.369242</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f322e85d-6197-4871-8a3a-8776e575e508')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-f322e85d-6197-4871-8a3a-8776e575e508 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-f322e85d-6197-4871-8a3a-8776e575e508');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-1f240263-6187-4505-a731-d104056c1efc\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1f240263-6187-4505-a731-d104056c1efc')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-1f240263-6187-4505-a731-d104056c1efc button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(df3\",\n  \"rows\": 3,\n  \"fields\": [\n    {\n      \"column\": \"A\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7749036482498912,\n        \"min\": -0.854790227818448,\n        \"max\": 0.6747598312205353,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          -0.854790227818448,\n          0.6747598312205353,\n          0.12628194658131062\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"B\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.8081739349879326,\n        \"min\": -1.523488950059451,\n        \"max\": 0.03354313170510031,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          -1.523488950059451,\n          0.03354313170510031,\n          -0.3692420881781553\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df3.head(3)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 143
        },
        "id": "S3a8aNyaKLM4",
        "outputId": "5996e157-df66-4506-b20e-04172f651ea5"
      },
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          A         B\n",
              "0 -0.854790 -1.523489\n",
              "1  0.674760  0.033543\n",
              "2  0.126282 -0.369242"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-9dc9c065-7817-488b-b0f1-78b54b15664b\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>A</th>\n",
              "      <th>B</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>-0.854790</td>\n",
              "      <td>-1.523489</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.674760</td>\n",
              "      <td>0.033543</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.126282</td>\n",
              "      <td>-0.369242</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9dc9c065-7817-488b-b0f1-78b54b15664b')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-9dc9c065-7817-488b-b0f1-78b54b15664b button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-9dc9c065-7817-488b-b0f1-78b54b15664b');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-68c5035c-6b5d-4f88-a590-275533a5b700\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-68c5035c-6b5d-4f88-a590-275533a5b700')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-68c5035c-6b5d-4f88-a590-275533a5b700 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df3",
              "summary": "{\n  \"name\": \"df3\",\n  \"rows\": 50,\n  \"fields\": [\n    {\n      \"column\": \"A\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0287459279237505,\n        \"min\": -2.39764533797099,\n        \"max\": 2.201248554546887,\n        \"num_unique_values\": 50,\n        \"samples\": [\n          0.12450783449061546,\n          0.09589675631175358,\n          -1.1943429420849945\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"B\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.8085580846597348,\n        \"min\": -1.5593696964644255,\n        \"max\": 2.1595211006607915,\n        \"num_unique_values\": 50,\n        \"samples\": [\n          0.23972398690080488,\n          0.7109931590974927,\n          0.05177119636660045\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 47
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df3.head(-5) # See what it does"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "HCTLsyHWKNrG",
        "outputId": "847b3439-6d07-4df0-d849-ad0c94e21fd4"
      },
      "execution_count": 48,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           A         B\n",
              "0  -0.854790 -1.523489\n",
              "1   0.674760  0.033543\n",
              "2   0.126282 -0.369242\n",
              "3  -0.750292  0.428675\n",
              "4   0.688758 -0.676909\n",
              "5   0.615752  0.199621\n",
              "6  -0.551712  0.114656\n",
              "7  -2.147526  1.032450\n",
              "8   0.209458 -0.518184\n",
              "9  -0.180929 -0.636783\n",
              "10 -0.953073  0.204810\n",
              "11 -1.674221  1.254970\n",
              "12 -1.443257 -1.294232\n",
              "13  0.124508  0.239724\n",
              "14  0.692256  0.027987\n",
              "15  2.052591  1.317619\n",
              "16  1.639309  0.716536\n",
              "17  1.030787  0.952214\n",
              "18 -1.585280  1.473087\n",
              "19 -0.976267 -0.202677\n",
              "20 -0.893741  0.603719\n",
              "21  0.328689 -0.004251\n",
              "22 -0.952310  0.569643\n",
              "23  0.386007 -0.528726\n",
              "24 -1.513364 -1.090059\n",
              "25 -1.035962  1.348654\n",
              "26  0.102885  0.450519\n",
              "27 -0.264481 -0.097401\n",
              "28 -0.174682  0.272637\n",
              "29  1.731144  0.682184\n",
              "30 -1.194343  0.051771\n",
              "31 -0.434807  0.828794\n",
              "32 -0.077068  1.153773\n",
              "33 -0.073212 -1.173969\n",
              "34 -0.038833  2.159521\n",
              "35  1.723356  0.020112\n",
              "36  2.201249  0.004148\n",
              "37  0.650689 -0.240731\n",
              "38 -0.815862 -0.027605\n",
              "39  0.095897  0.710993\n",
              "40  0.018143  0.296273\n",
              "41 -0.508368  0.114338\n",
              "42 -2.397645  1.041533\n",
              "43 -0.359773 -1.131993\n",
              "44  1.059095 -0.069907"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-8f1740dc-d987-43a0-a2c6-f606e42c04f2\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>A</th>\n",
              "      <th>B</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>-0.854790</td>\n",
              "      <td>-1.523489</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.674760</td>\n",
              "      <td>0.033543</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.126282</td>\n",
              "      <td>-0.369242</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>-0.750292</td>\n",
              "      <td>0.428675</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.688758</td>\n",
              "      <td>-0.676909</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>0.615752</td>\n",
              "      <td>0.199621</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>-0.551712</td>\n",
              "      <td>0.114656</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>-2.147526</td>\n",
              "      <td>1.032450</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>0.209458</td>\n",
              "      <td>-0.518184</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>-0.180929</td>\n",
              "      <td>-0.636783</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>-0.953073</td>\n",
              "      <td>0.204810</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>-1.674221</td>\n",
              "      <td>1.254970</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>-1.443257</td>\n",
              "      <td>-1.294232</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>0.124508</td>\n",
              "      <td>0.239724</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>0.692256</td>\n",
              "      <td>0.027987</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>2.052591</td>\n",
              "      <td>1.317619</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>1.639309</td>\n",
              "      <td>0.716536</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>1.030787</td>\n",
              "      <td>0.952214</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>-1.585280</td>\n",
              "      <td>1.473087</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>-0.976267</td>\n",
              "      <td>-0.202677</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>-0.893741</td>\n",
              "      <td>0.603719</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>0.328689</td>\n",
              "      <td>-0.004251</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22</th>\n",
              "      <td>-0.952310</td>\n",
              "      <td>0.569643</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23</th>\n",
              "      <td>0.386007</td>\n",
              "      <td>-0.528726</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24</th>\n",
              "      <td>-1.513364</td>\n",
              "      <td>-1.090059</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25</th>\n",
              "      <td>-1.035962</td>\n",
              "      <td>1.348654</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26</th>\n",
              "      <td>0.102885</td>\n",
              "      <td>0.450519</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27</th>\n",
              "      <td>-0.264481</td>\n",
              "      <td>-0.097401</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>28</th>\n",
              "      <td>-0.174682</td>\n",
              "      <td>0.272637</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>29</th>\n",
              "      <td>1.731144</td>\n",
              "      <td>0.682184</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30</th>\n",
              "      <td>-1.194343</td>\n",
              "      <td>0.051771</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>31</th>\n",
              "      <td>-0.434807</td>\n",
              "      <td>0.828794</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32</th>\n",
              "      <td>-0.077068</td>\n",
              "      <td>1.153773</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>33</th>\n",
              "      <td>-0.073212</td>\n",
              "      <td>-1.173969</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>34</th>\n",
              "      <td>-0.038833</td>\n",
              "      <td>2.159521</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>35</th>\n",
              "      <td>1.723356</td>\n",
              "      <td>0.020112</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>36</th>\n",
              "      <td>2.201249</td>\n",
              "      <td>0.004148</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>37</th>\n",
              "      <td>0.650689</td>\n",
              "      <td>-0.240731</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>38</th>\n",
              "      <td>-0.815862</td>\n",
              "      <td>-0.027605</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>39</th>\n",
              "      <td>0.095897</td>\n",
              "      <td>0.710993</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>40</th>\n",
              "      <td>0.018143</td>\n",
              "      <td>0.296273</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>41</th>\n",
              "      <td>-0.508368</td>\n",
              "      <td>0.114338</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>42</th>\n",
              "      <td>-2.397645</td>\n",
              "      <td>1.041533</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>43</th>\n",
              "      <td>-0.359773</td>\n",
              "      <td>-1.131993</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>44</th>\n",
              "      <td>1.059095</td>\n",
              "      <td>-0.069907</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8f1740dc-d987-43a0-a2c6-f606e42c04f2')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-8f1740dc-d987-43a0-a2c6-f606e42c04f2 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-8f1740dc-d987-43a0-a2c6-f606e42c04f2');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-cfa465da-bebe-4667-8c91-5ac393505209\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-cfa465da-bebe-4667-8c91-5ac393505209')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-cfa465da-bebe-4667-8c91-5ac393505209 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df3",
              "summary": "{\n  \"name\": \"df3\",\n  \"rows\": 50,\n  \"fields\": [\n    {\n      \"column\": \"A\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0287459279237505,\n        \"min\": -2.39764533797099,\n        \"max\": 2.201248554546887,\n        \"num_unique_values\": 50,\n        \"samples\": [\n          0.12450783449061546,\n          0.09589675631175358,\n          -1.1943429420849945\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"B\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.8085580846597348,\n        \"min\": -1.5593696964644255,\n        \"max\": 2.1595211006607915,\n        \"num_unique_values\": 50,\n        \"samples\": [\n          0.23972398690080488,\n          0.7109931590974927,\n          0.05177119636660045\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 48
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df3.tail(-5)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "ZSVQd0peKUEG",
        "outputId": "2e556763-e1a7-4eb5-c77c-e74844912daa"
      },
      "execution_count": 49,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           A         B\n",
              "5   0.615752  0.199621\n",
              "6  -0.551712  0.114656\n",
              "7  -2.147526  1.032450\n",
              "8   0.209458 -0.518184\n",
              "9  -0.180929 -0.636783\n",
              "10 -0.953073  0.204810\n",
              "11 -1.674221  1.254970\n",
              "12 -1.443257 -1.294232\n",
              "13  0.124508  0.239724\n",
              "14  0.692256  0.027987\n",
              "15  2.052591  1.317619\n",
              "16  1.639309  0.716536\n",
              "17  1.030787  0.952214\n",
              "18 -1.585280  1.473087\n",
              "19 -0.976267 -0.202677\n",
              "20 -0.893741  0.603719\n",
              "21  0.328689 -0.004251\n",
              "22 -0.952310  0.569643\n",
              "23  0.386007 -0.528726\n",
              "24 -1.513364 -1.090059\n",
              "25 -1.035962  1.348654\n",
              "26  0.102885  0.450519\n",
              "27 -0.264481 -0.097401\n",
              "28 -0.174682  0.272637\n",
              "29  1.731144  0.682184\n",
              "30 -1.194343  0.051771\n",
              "31 -0.434807  0.828794\n",
              "32 -0.077068  1.153773\n",
              "33 -0.073212 -1.173969\n",
              "34 -0.038833  2.159521\n",
              "35  1.723356  0.020112\n",
              "36  2.201249  0.004148\n",
              "37  0.650689 -0.240731\n",
              "38 -0.815862 -0.027605\n",
              "39  0.095897  0.710993\n",
              "40  0.018143  0.296273\n",
              "41 -0.508368  0.114338\n",
              "42 -2.397645  1.041533\n",
              "43 -0.359773 -1.131993\n",
              "44  1.059095 -0.069907\n",
              "45 -0.793368 -1.559370\n",
              "46  0.025521 -0.347370\n",
              "47 -0.552156 -0.041881\n",
              "48  0.048564  1.149624\n",
              "49  0.453607  0.130058"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-8107cb36-d792-461d-9d9d-be7131b11fea\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>A</th>\n",
              "      <th>B</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>0.615752</td>\n",
              "      <td>0.199621</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>-0.551712</td>\n",
              "      <td>0.114656</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>-2.147526</td>\n",
              "      <td>1.032450</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>0.209458</td>\n",
              "      <td>-0.518184</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>-0.180929</td>\n",
              "      <td>-0.636783</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>-0.953073</td>\n",
              "      <td>0.204810</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>-1.674221</td>\n",
              "      <td>1.254970</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>-1.443257</td>\n",
              "      <td>-1.294232</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>0.124508</td>\n",
              "      <td>0.239724</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>0.692256</td>\n",
              "      <td>0.027987</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>2.052591</td>\n",
              "      <td>1.317619</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>1.639309</td>\n",
              "      <td>0.716536</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>1.030787</td>\n",
              "      <td>0.952214</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>-1.585280</td>\n",
              "      <td>1.473087</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>-0.976267</td>\n",
              "      <td>-0.202677</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>-0.893741</td>\n",
              "      <td>0.603719</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>0.328689</td>\n",
              "      <td>-0.004251</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22</th>\n",
              "      <td>-0.952310</td>\n",
              "      <td>0.569643</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23</th>\n",
              "      <td>0.386007</td>\n",
              "      <td>-0.528726</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24</th>\n",
              "      <td>-1.513364</td>\n",
              "      <td>-1.090059</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25</th>\n",
              "      <td>-1.035962</td>\n",
              "      <td>1.348654</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26</th>\n",
              "      <td>0.102885</td>\n",
              "      <td>0.450519</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27</th>\n",
              "      <td>-0.264481</td>\n",
              "      <td>-0.097401</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>28</th>\n",
              "      <td>-0.174682</td>\n",
              "      <td>0.272637</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>29</th>\n",
              "      <td>1.731144</td>\n",
              "      <td>0.682184</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30</th>\n",
              "      <td>-1.194343</td>\n",
              "      <td>0.051771</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>31</th>\n",
              "      <td>-0.434807</td>\n",
              "      <td>0.828794</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32</th>\n",
              "      <td>-0.077068</td>\n",
              "      <td>1.153773</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>33</th>\n",
              "      <td>-0.073212</td>\n",
              "      <td>-1.173969</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>34</th>\n",
              "      <td>-0.038833</td>\n",
              "      <td>2.159521</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>35</th>\n",
              "      <td>1.723356</td>\n",
              "      <td>0.020112</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>36</th>\n",
              "      <td>2.201249</td>\n",
              "      <td>0.004148</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>37</th>\n",
              "      <td>0.650689</td>\n",
              "      <td>-0.240731</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>38</th>\n",
              "      <td>-0.815862</td>\n",
              "      <td>-0.027605</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>39</th>\n",
              "      <td>0.095897</td>\n",
              "      <td>0.710993</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>40</th>\n",
              "      <td>0.018143</td>\n",
              "      <td>0.296273</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>41</th>\n",
              "      <td>-0.508368</td>\n",
              "      <td>0.114338</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>42</th>\n",
              "      <td>-2.397645</td>\n",
              "      <td>1.041533</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>43</th>\n",
              "      <td>-0.359773</td>\n",
              "      <td>-1.131993</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>44</th>\n",
              "      <td>1.059095</td>\n",
              "      <td>-0.069907</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>45</th>\n",
              "      <td>-0.793368</td>\n",
              "      <td>-1.559370</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>46</th>\n",
              "      <td>0.025521</td>\n",
              "      <td>-0.347370</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>47</th>\n",
              "      <td>-0.552156</td>\n",
              "      <td>-0.041881</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>48</th>\n",
              "      <td>0.048564</td>\n",
              "      <td>1.149624</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>49</th>\n",
              "      <td>0.453607</td>\n",
              "      <td>0.130058</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8107cb36-d792-461d-9d9d-be7131b11fea')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-8107cb36-d792-461d-9d9d-be7131b11fea button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-8107cb36-d792-461d-9d9d-be7131b11fea');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-f2ed4885-ccdc-44ea-ae69-5c4f8e5d1d5d\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f2ed4885-ccdc-44ea-ae69-5c4f8e5d1d5d')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-f2ed4885-ccdc-44ea-ae69-5c4f8e5d1d5d button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df3\",\n  \"rows\": 45,\n  \"fields\": [\n    {\n      \"column\": \"A\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0612711343684285,\n        \"min\": -2.39764533797099,\n        \"max\": 2.201248554546887,\n        \"num_unique_values\": 45,\n        \"samples\": [\n          1.0590950604129399,\n          -1.1943429420849945,\n          -0.43480688218037006\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"B\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7968329277842289,\n        \"min\": -1.5593696964644255,\n        \"max\": 2.1595211006607915,\n        \"num_unique_values\": 45,\n        \"samples\": [\n          -0.0699072223661406,\n          0.05177119636660045,\n          0.8287942837643609\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 49
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "srV9a0eWhxnh"
      },
      "execution_count": 49,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Create pandas Dataframe using np.array\n",
        "dfm = pd.DataFrame(data = np.random.randn(1000).reshape(500, 2), columns = [\"A\", \"B\"])"
      ],
      "metadata": {
        "id": "ThrGzTHUKYjY"
      },
      "execution_count": 50,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Select columns in pandas dfm\n",
        "dfm.loc[:5, [\"A\",\"B\"]]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 237
        },
        "id": "6nv72vnxKlYn",
        "outputId": "d872dd34-4c6b-475b-e207-09f734982194"
      },
      "execution_count": 51,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          A         B\n",
              "0  1.171349 -0.324963\n",
              "1  0.613882  1.391752\n",
              "2  0.758237 -1.485440\n",
              "3  0.603095  1.218984\n",
              "4  1.448821  2.099334\n",
              "5 -0.697767  0.846904"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-56c5392d-164c-40a2-b119-c272736aad55\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>A</th>\n",
              "      <th>B</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1.171349</td>\n",
              "      <td>-0.324963</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.613882</td>\n",
              "      <td>1.391752</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.758237</td>\n",
              "      <td>-1.485440</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.603095</td>\n",
              "      <td>1.218984</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1.448821</td>\n",
              "      <td>2.099334</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>-0.697767</td>\n",
              "      <td>0.846904</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-56c5392d-164c-40a2-b119-c272736aad55')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-56c5392d-164c-40a2-b119-c272736aad55 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-56c5392d-164c-40a2-b119-c272736aad55');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-29a9b15b-100e-49a7-ae5e-3662dcab1fee\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-29a9b15b-100e-49a7-ae5e-3662dcab1fee')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-29a9b15b-100e-49a7-ae5e-3662dcab1fee button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"dfm\",\n  \"rows\": 6,\n  \"fields\": [\n    {\n      \"column\": \"A\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7404884986467909,\n        \"min\": -0.6977671965233955,\n        \"max\": 1.4488212865831909,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          1.171349479346685,\n          0.6138816566676851,\n          -0.6977671965233955\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"B\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.3053744473094833,\n        \"min\": -1.4854402568424128,\n        \"max\": 2.0993338479541745,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          -0.32496267760820313,\n          1.391751936289249,\n          0.8469043783481155\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 51
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dfm.iloc[:6, [0, 1]] # Selecting colums in Pandas Dfm"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 237
        },
        "id": "R8LZO0yzKpR2",
        "outputId": "1632b7a8-bb06-43f3-d9c7-16559a916f1e"
      },
      "execution_count": 52,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          A         B\n",
              "0  1.171349 -0.324963\n",
              "1  0.613882  1.391752\n",
              "2  0.758237 -1.485440\n",
              "3  0.603095  1.218984\n",
              "4  1.448821  2.099334\n",
              "5 -0.697767  0.846904"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4098baf4-31c5-42f4-8b6a-858fa64250fa\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>A</th>\n",
              "      <th>B</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1.171349</td>\n",
              "      <td>-0.324963</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.613882</td>\n",
              "      <td>1.391752</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.758237</td>\n",
              "      <td>-1.485440</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.603095</td>\n",
              "      <td>1.218984</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1.448821</td>\n",
              "      <td>2.099334</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>-0.697767</td>\n",
              "      <td>0.846904</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4098baf4-31c5-42f4-8b6a-858fa64250fa')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-4098baf4-31c5-42f4-8b6a-858fa64250fa button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-4098baf4-31c5-42f4-8b6a-858fa64250fa');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-79300270-7405-490f-b4a3-2b23e6aa12aa\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-79300270-7405-490f-b4a3-2b23e6aa12aa')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-79300270-7405-490f-b4a3-2b23e6aa12aa button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"dfm\",\n  \"rows\": 6,\n  \"fields\": [\n    {\n      \"column\": \"A\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7404884986467909,\n        \"min\": -0.6977671965233955,\n        \"max\": 1.4488212865831909,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          1.171349479346685,\n          0.6138816566676851,\n          -0.6977671965233955\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"B\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.3053744473094833,\n        \"min\": -1.4854402568424128,\n        \"max\": 2.0993338479541745,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          -0.32496267760820313,\n          1.391751936289249,\n          0.8469043783481155\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 52
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Create a new boolean var\n",
        "dfm[\"C\"] = dfm[\"A\"]>0"
      ],
      "metadata": {
        "id": "_0QtcHs3KsVG"
      },
      "execution_count": 53,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "f1E7kmlph-ql"
      },
      "execution_count": 53,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dfm.head(10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 363
        },
        "id": "EPVEolkAKxwt",
        "outputId": "d940f51f-5c6d-4fdf-c89e-c8d053de1851"
      },
      "execution_count": 54,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          A         B      C\n",
              "0  1.171349 -0.324963   True\n",
              "1  0.613882  1.391752   True\n",
              "2  0.758237 -1.485440   True\n",
              "3  0.603095  1.218984   True\n",
              "4  1.448821  2.099334   True\n",
              "5 -0.697767  0.846904  False\n",
              "6 -0.473285 -0.068257  False\n",
              "7 -1.219386  1.092668  False\n",
              "8  0.727804  0.231510   True\n",
              "9  0.670078 -1.409845   True"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ad862b85-58c8-40fa-9736-c5d0c5f8e001\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>A</th>\n",
              "      <th>B</th>\n",
              "      <th>C</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1.171349</td>\n",
              "      <td>-0.324963</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.613882</td>\n",
              "      <td>1.391752</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.758237</td>\n",
              "      <td>-1.485440</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.603095</td>\n",
              "      <td>1.218984</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1.448821</td>\n",
              "      <td>2.099334</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>-0.697767</td>\n",
              "      <td>0.846904</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>-0.473285</td>\n",
              "      <td>-0.068257</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>-1.219386</td>\n",
              "      <td>1.092668</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>0.727804</td>\n",
              "      <td>0.231510</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>0.670078</td>\n",
              "      <td>-1.409845</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ad862b85-58c8-40fa-9736-c5d0c5f8e001')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-ad862b85-58c8-40fa-9736-c5d0c5f8e001 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-ad862b85-58c8-40fa-9736-c5d0c5f8e001');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-e72e534f-5543-4dbe-9097-731ecb5e4d74\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e72e534f-5543-4dbe-9097-731ecb5e4d74')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-e72e534f-5543-4dbe-9097-731ecb5e4d74 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "dfm",
              "summary": "{\n  \"name\": \"dfm\",\n  \"rows\": 500,\n  \"fields\": [\n    {\n      \"column\": \"A\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0257871499055464,\n        \"min\": -3.4974043312939913,\n        \"max\": 2.7339531190874813,\n        \"num_unique_values\": 500,\n        \"samples\": [\n          -0.4246898071540841,\n          -0.7242700421730034,\n          -2.2237408069127693\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"B\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.9717347996987148,\n        \"min\": -3.047574914034872,\n        \"max\": 2.3226297931596833,\n        \"num_unique_values\": 500,\n        \"samples\": [\n          1.0845034786078773,\n          0.3383241588492323,\n          -2.9811489628330468\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"C\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          false,\n          true\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 54
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# More on variables creation\n",
        "dfm[\"D\"] = np.random.randn(dfm.shape[0])"
      ],
      "metadata": {
        "id": "Qx5ht5pyK0eM"
      },
      "execution_count": 55,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dfm.head(10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 363
        },
        "id": "VXC_2ZN8K6Pt",
        "outputId": "7deb6159-a215-4812-f4ea-d3242d48632e"
      },
      "execution_count": 56,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          A         B      C         D\n",
              "0  1.171349 -0.324963   True  0.647244\n",
              "1  0.613882  1.391752   True  1.538499\n",
              "2  0.758237 -1.485440   True  0.492977\n",
              "3  0.603095  1.218984   True  0.699745\n",
              "4  1.448821  2.099334   True  0.146901\n",
              "5 -0.697767  0.846904  False -1.434104\n",
              "6 -0.473285 -0.068257  False  0.781035\n",
              "7 -1.219386  1.092668  False -0.247347\n",
              "8  0.727804  0.231510   True -0.680514\n",
              "9  0.670078 -1.409845   True -1.262134"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c3ea85db-7b78-4b54-9d45-999f3c02941b\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>A</th>\n",
              "      <th>B</th>\n",
              "      <th>C</th>\n",
              "      <th>D</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1.171349</td>\n",
              "      <td>-0.324963</td>\n",
              "      <td>True</td>\n",
              "      <td>0.647244</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.613882</td>\n",
              "      <td>1.391752</td>\n",
              "      <td>True</td>\n",
              "      <td>1.538499</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.758237</td>\n",
              "      <td>-1.485440</td>\n",
              "      <td>True</td>\n",
              "      <td>0.492977</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.603095</td>\n",
              "      <td>1.218984</td>\n",
              "      <td>True</td>\n",
              "      <td>0.699745</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1.448821</td>\n",
              "      <td>2.099334</td>\n",
              "      <td>True</td>\n",
              "      <td>0.146901</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>-0.697767</td>\n",
              "      <td>0.846904</td>\n",
              "      <td>False</td>\n",
              "      <td>-1.434104</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>-0.473285</td>\n",
              "      <td>-0.068257</td>\n",
              "      <td>False</td>\n",
              "      <td>0.781035</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>-1.219386</td>\n",
              "      <td>1.092668</td>\n",
              "      <td>False</td>\n",
              "      <td>-0.247347</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>0.727804</td>\n",
              "      <td>0.231510</td>\n",
              "      <td>True</td>\n",
              "      <td>-0.680514</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>0.670078</td>\n",
              "      <td>-1.409845</td>\n",
              "      <td>True</td>\n",
              "      <td>-1.262134</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c3ea85db-7b78-4b54-9d45-999f3c02941b')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-c3ea85db-7b78-4b54-9d45-999f3c02941b button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-c3ea85db-7b78-4b54-9d45-999f3c02941b');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-c35b425d-e323-40e6-8872-54b4185d6713\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c35b425d-e323-40e6-8872-54b4185d6713')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-c35b425d-e323-40e6-8872-54b4185d6713 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "dfm",
              "summary": "{\n  \"name\": \"dfm\",\n  \"rows\": 500,\n  \"fields\": [\n    {\n      \"column\": \"A\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0257871499055464,\n        \"min\": -3.4974043312939913,\n        \"max\": 2.7339531190874813,\n        \"num_unique_values\": 500,\n        \"samples\": [\n          -0.4246898071540841,\n          -0.7242700421730034,\n          -2.2237408069127693\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"B\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.9717347996987148,\n        \"min\": -3.047574914034872,\n        \"max\": 2.3226297931596833,\n        \"num_unique_values\": 500,\n        \"samples\": [\n          1.0845034786078773,\n          0.3383241588492323,\n          -2.9811489628330468\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"C\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          false,\n          true\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"D\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.9792249827269495,\n        \"min\": -2.8975264220760057,\n        \"max\": 2.7166463710052122,\n        \"num_unique_values\": 500,\n        \"samples\": [\n          0.7898375005663657,\n          -1.3064232372392137\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 56
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dfm[\"E\"] = np.exp(dfm[\"C\"]) # Transformation"
      ],
      "metadata": {
        "id": "n_HlkX-zK87B"
      },
      "execution_count": 57,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print"
      ],
      "metadata": {
        "id": "sgwh1PiB_OIc",
        "outputId": "b6ced034-e69f-4b3b-9fdb-6cfa473210f7",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 87,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<function print(*args, sep=' ', end='\\n', file=None, flush=False)>"
            ]
          },
          "metadata": {},
          "execution_count": 87
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dfm.head(10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 363
        },
        "id": "GFrMpcR_LDUq",
        "outputId": "932b5af9-34fa-4b2a-e378-2697f1c08136"
      },
      "execution_count": 60,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          A         B      C         D        E\n",
              "0  1.171349 -0.324963   True  0.647244  2.71875\n",
              "1  0.613882  1.391752   True  1.538499  2.71875\n",
              "2  0.758237 -1.485440   True  0.492977  2.71875\n",
              "3  0.603095  1.218984   True  0.699745  2.71875\n",
              "4  1.448821  2.099334   True  0.146901  2.71875\n",
              "5 -0.697767  0.846904  False -1.434104  1.00000\n",
              "6 -0.473285 -0.068257  False  0.781035  1.00000\n",
              "7 -1.219386  1.092668  False -0.247347  1.00000\n",
              "8  0.727804  0.231510   True -0.680514  2.71875\n",
              "9  0.670078 -1.409845   True -1.262134  2.71875"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-8e7f4304-7b41-4145-9e97-be46b47b7641\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>A</th>\n",
              "      <th>B</th>\n",
              "      <th>C</th>\n",
              "      <th>D</th>\n",
              "      <th>E</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1.171349</td>\n",
              "      <td>-0.324963</td>\n",
              "      <td>True</td>\n",
              "      <td>0.647244</td>\n",
              "      <td>2.71875</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.613882</td>\n",
              "      <td>1.391752</td>\n",
              "      <td>True</td>\n",
              "      <td>1.538499</td>\n",
              "      <td>2.71875</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.758237</td>\n",
              "      <td>-1.485440</td>\n",
              "      <td>True</td>\n",
              "      <td>0.492977</td>\n",
              "      <td>2.71875</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.603095</td>\n",
              "      <td>1.218984</td>\n",
              "      <td>True</td>\n",
              "      <td>0.699745</td>\n",
              "      <td>2.71875</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1.448821</td>\n",
              "      <td>2.099334</td>\n",
              "      <td>True</td>\n",
              "      <td>0.146901</td>\n",
              "      <td>2.71875</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>-0.697767</td>\n",
              "      <td>0.846904</td>\n",
              "      <td>False</td>\n",
              "      <td>-1.434104</td>\n",
              "      <td>1.00000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>-0.473285</td>\n",
              "      <td>-0.068257</td>\n",
              "      <td>False</td>\n",
              "      <td>0.781035</td>\n",
              "      <td>1.00000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>-1.219386</td>\n",
              "      <td>1.092668</td>\n",
              "      <td>False</td>\n",
              "      <td>-0.247347</td>\n",
              "      <td>1.00000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>0.727804</td>\n",
              "      <td>0.231510</td>\n",
              "      <td>True</td>\n",
              "      <td>-0.680514</td>\n",
              "      <td>2.71875</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>0.670078</td>\n",
              "      <td>-1.409845</td>\n",
              "      <td>True</td>\n",
              "      <td>-1.262134</td>\n",
              "      <td>2.71875</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8e7f4304-7b41-4145-9e97-be46b47b7641')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-8e7f4304-7b41-4145-9e97-be46b47b7641 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-8e7f4304-7b41-4145-9e97-be46b47b7641');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-912728f7-7a6c-4890-92f1-228483ee5612\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-912728f7-7a6c-4890-92f1-228483ee5612')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-912728f7-7a6c-4890-92f1-228483ee5612 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "dfm",
              "summary": "{\n  \"name\": \"dfm\",\n  \"rows\": 500,\n  \"fields\": [\n    {\n      \"column\": \"A\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0257871499055464,\n        \"min\": -3.4974043312939913,\n        \"max\": 2.7339531190874813,\n        \"num_unique_values\": 500,\n        \"samples\": [\n          -0.4246898071540841,\n          -0.7242700421730034,\n          -2.2237408069127693\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"B\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.9717347996987148,\n        \"min\": -3.047574914034872,\n        \"max\": 2.3226297931596833,\n        \"num_unique_values\": 500,\n        \"samples\": [\n          1.0845034786078773,\n          0.3383241588492323,\n          -2.9811489628330468\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"C\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          false,\n          true\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"D\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.9792249827269495,\n        \"min\": -2.8975264220760057,\n        \"max\": 2.7166463710052122,\n        \"num_unique_values\": 500,\n        \"samples\": [\n          0.7898375005663657,\n          -1.3064232372392137\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"E\",\n      \"properties\": {\n        \"dtype\": \"float16\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0,\n          2.71875\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 60
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Create categorical variable\n",
        "dfm[\"Q\"] = pd.qcut(dfm[\"A\"], q = 4, labels = [\"low\", \"medium\",\"average\", \"above\"])"
      ],
      "metadata": {
        "id": "5x5Ekh2MLGjC"
      },
      "execution_count": 61,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dfm.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "zfo0__ptLKQd",
        "outputId": "ac35924c-dad2-4911-f875-881444abef91"
      },
      "execution_count": 62,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          A         B     C         D        E        Q\n",
              "0  1.171349 -0.324963  True  0.647244  2.71875    above\n",
              "1  0.613882  1.391752  True  1.538499  2.71875  average\n",
              "2  0.758237 -1.485440  True  0.492977  2.71875    above\n",
              "3  0.603095  1.218984  True  0.699745  2.71875  average\n",
              "4  1.448821  2.099334  True  0.146901  2.71875    above"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2f986017-afc6-488a-b155-9c0629a3285a\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>A</th>\n",
              "      <th>B</th>\n",
              "      <th>C</th>\n",
              "      <th>D</th>\n",
              "      <th>E</th>\n",
              "      <th>Q</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1.171349</td>\n",
              "      <td>-0.324963</td>\n",
              "      <td>True</td>\n",
              "      <td>0.647244</td>\n",
              "      <td>2.71875</td>\n",
              "      <td>above</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.613882</td>\n",
              "      <td>1.391752</td>\n",
              "      <td>True</td>\n",
              "      <td>1.538499</td>\n",
              "      <td>2.71875</td>\n",
              "      <td>average</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.758237</td>\n",
              "      <td>-1.485440</td>\n",
              "      <td>True</td>\n",
              "      <td>0.492977</td>\n",
              "      <td>2.71875</td>\n",
              "      <td>above</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.603095</td>\n",
              "      <td>1.218984</td>\n",
              "      <td>True</td>\n",
              "      <td>0.699745</td>\n",
              "      <td>2.71875</td>\n",
              "      <td>average</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1.448821</td>\n",
              "      <td>2.099334</td>\n",
              "      <td>True</td>\n",
              "      <td>0.146901</td>\n",
              "      <td>2.71875</td>\n",
              "      <td>above</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2f986017-afc6-488a-b155-9c0629a3285a')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-2f986017-afc6-488a-b155-9c0629a3285a button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-2f986017-afc6-488a-b155-9c0629a3285a');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-f4ac985f-42bc-411d-8ed3-40e96335dde2\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f4ac985f-42bc-411d-8ed3-40e96335dde2')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-f4ac985f-42bc-411d-8ed3-40e96335dde2 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "dfm",
              "summary": "{\n  \"name\": \"dfm\",\n  \"rows\": 500,\n  \"fields\": [\n    {\n      \"column\": \"A\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0257871499055464,\n        \"min\": -3.4974043312939913,\n        \"max\": 2.7339531190874813,\n        \"num_unique_values\": 500,\n        \"samples\": [\n          -0.4246898071540841,\n          -0.7242700421730034,\n          -2.2237408069127693\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"B\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.9717347996987148,\n        \"min\": -3.047574914034872,\n        \"max\": 2.3226297931596833,\n        \"num_unique_values\": 500,\n        \"samples\": [\n          1.0845034786078773,\n          0.3383241588492323,\n          -2.9811489628330468\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"C\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          false,\n          true\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"D\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.9792249827269495,\n        \"min\": -2.8975264220760057,\n        \"max\": 2.7166463710052122,\n        \"num_unique_values\": 500,\n        \"samples\": [\n          0.7898375005663657,\n          -1.3064232372392137\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"E\",\n      \"properties\": {\n        \"dtype\": \"float16\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0,\n          2.71875\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Q\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"average\",\n          \"medium\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 62
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Ploting with pandas\n",
        "plt.figure(figsize = (8, 6))\n",
        "dfm[\"A\"].plot(kind = \"line\", color = \"red\")\n",
        "plt.title(\"Time series Plot\")\n",
        "plt.xlabel(\"count\")\n",
        "plt.ylabel(\"A\")\n",
        "plt.savefig(\"Stationarity.png\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 553
        },
        "id": "u7uUHzYULRlu",
        "outputId": "ffefabb6-1cc3-4855-d53e-045ec5f3133e"
      },
      "execution_count": 89,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# import os: Uncomment and run if you want\n",
        "# os.chdir(\"Your Directory\")# You need to load your drive to ensure your output get saved\n",
        "# from google.colab import drive\n",
        "# drive.mount(\"/content/drive/\", force_remount = True)\n",
        "# os.chdir(\"Your Directory\")"
      ],
      "metadata": {
        "id": "OMyVG8G0LU5L"
      },
      "execution_count": 92,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "fig, axes = plt.subplots(nrows = 1, ncols = 3, figsize = (12, 8))\n",
        "axes[0].scatter(dfm[\"A\"], dfm[\"B\"], color = \"fuchsia\")\n",
        "axes[1].hist(dfm[\"A\"], bins = 20, color = \"red\")\n",
        "axes[2].barh(dfm[\"C\"],width = 0.3, color = \"green\")\n",
        "axes[0].set_title(\"Scatter AB\")\n",
        "axes[0].set_xlabel(\"count\")\n",
        "axes[0].set_ylabel(\"A\")\n",
        "axes[1].set_title(\"Histogram\")\n",
        "axes[1].set_xlabel(\"count\")\n",
        "axes[1].set_ylabel(\"A\")\n",
        "axes[2].set_title(\"Barchart AB\")\n",
        "axes[2].set_xlabel(\"count\")\n",
        "axes[2].set_ylabel(\"A\")\n",
        "\n",
        "#Nawezaje kubadili orientation ya y label iwe horizontal?"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 509
        },
        "id": "whC-onbSLZXF",
        "outputId": "862707aa-9386-495d-e278-b80893d92e35"
      },
      "execution_count": 95,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0, 0.5, 'A')"
            ]
          },
          "metadata": {},
          "execution_count": 95
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x800 with 3 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAA+cAAAK9CAYAAABGnB2ZAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQAAtlNJREFUeJzs3Xt8FPW9//H3EiVBkSDXAImCSr3WS1ERWzQoFq1VLKCCtirHQi+IRVqtHC2ItcWq1WiLUq1KewTxhvCzrahFo/aINyynVU8teqBcw01NhNZgw/7+mJ3N7mYu35mdvSWv5+Oxj5Dd2ZnvTOKaz3w/388nFo/H4wIAAAAAAAXTqdADAAAAAACgoyM4BwAAAACgwAjOAQAAAAAoMIJzAAAAAAAKjOAcAAAAAIACIzgHAAAAAKDACM4BAAAAACgwgnMAAAAAAAqM4BwAAAAAgAIjOAcAoMQMHDhQl112WaGHAQDt1vz58xWLxfTmm28WeijoQAjOkTd//etfNW7cOB144IGqqKjQgAEDdMYZZ+gXv/hFzo65cOFC1dXVtXl+06ZNuuGGG7Rq1aqcHdvLH/7wB8ViMfXv31979uxx3GbgwIGKxWLJR0VFhQYPHqyrr75aH374YZ5HDCCX/P4IrK2t1VFHHZXVMf7whz/ohhtuyGofAJAL9mdg6qNPnz4aMWKEnn766UIPLy/uvvtuzZ8/P/D7Pv74Y1VUVCgWi+l///d/Hbe57LLL0q7tXnvtpZqaGo0fP17vvvtuliNHlPYq9ADQMbzyyisaMWKEDjjgAE2aNElVVVVav369Xn31Vd15552aOnVqTo67cOFCvf3225o2bVra85s2bdLs2bM1cOBAHXvssTk5tpcFCxZo4MCBWrt2rZ5//nmNHDnScbtjjz1W3//+9yVJn376qVauXKm6ujq9+OKLev311/M5ZABF5L333lOnTsHur//hD3/Q3LlzCdABFK0bb7xRgwYNUjwe15YtWzR//nx95Stf0VNPPaWvfvWrhR5eTt19993q1atX4Kyoxx57TLFYTFVVVVqwYIFuuukmx+3Ky8v161//WpL073//Wx988IHmzZunZcuW6d1331X//v2zPQVEgOAcefGTn/xElZWVeuONN9S9e/e017Zu3VqYQeXArl27tO+++/pus3TpUs2ZM0cPPvigFixY4BqcDxgwQF//+teT33/zm99U165dddttt2n16tUaPHhwpOMHUBrKy8sLPYTATD4fAXRsZ511lo4//vjk95dffrn69u2rhx9+OJLgfM+ePdq9e7cqKiqy3ldU/vnPf2qfffYJ/f6HHnpIX/nKV3TggQdq4cKFrsH5XnvtlfY3pSSddNJJ+upXv6rf//73mjRpUugxIDqktSMvPvjgAx155JFtAnNJ6tOnT5vnHnroIZ144onaZ599tP/+++uUU07Rs88+m3x96dKlOvvss9W/f3+Vl5fr4IMP1o9//GO1tLQkt6mtrdXvf/97/eMf/0im8QwcOFD19fU64YQTJEkTJ05MvpaaSvTaa6/pzDPPVGVlpfbZZx+deuqp+u///u+0Md5www2KxWJ69913ddFFF2n//ffXl770Jd9r8eSTT+pf//qXzj//fI0fP16LFy/Wp59+6vs+W1VVlSTrQxZAx5S55vyzzz7T7NmzNXjwYFVUVKhnz5760pe+pOeee06SldI4d+5cSUpLbbTt2rVL3//+91VTU6Py8nIdeuihuu222xSPx9OO+69//UtXXnmlevXqpf3220/nnnuuNm7cqFgsljYj7/X5+Je//EWXXXaZDjroIFVUVKiqqkr/8R//oR07dqQdy97H3//+d339619XZWWlevfurR/96EeKx+Nav369Ro8erW7duqmqqko///nPo7zEAIpA9+7d1aVLlzZ/89x22206+eST1bNnT3Xp0kVDhgzR448/3ub9sVhMV1xxhRYsWKAjjzxS5eXlWrZsmSRp48aNuvzyy5N/Sw4aNEjf+c53tHv37rR9NDc3a/r06erdu7f23Xdffe1rX9O2bdvStjH5u1RqXaK0cuVKnXLKKdpnn330n//5nxo4cKDeeecdvfjii8nP59raWt/rs27dOr388ssaP368xo8frzVr1uiVV14xubSS+JuyGPGTQF4ceOCBWrFihd5++23fdZOzZ8/WDTfcoJNPPlk33nijOnfurNdee03PP/+8vvzlL0uy1iZ17dpV06dPV9euXfX8889r5syZampq0q233ipJuu6669TY2KgNGzbojjvukCR17dpVhx9+uG688UbNnDlTkydP1vDhwyVJJ598siTp+eef11lnnaUhQ4Zo1qxZ6tSpkx588EGddtppevnll3XiiSemjff888/X4MGD9dOf/rTNH7JOFixYoBEjRqiqqkrjx4/Xtddeq6eeekrnn39+m20/++wzbd++XZKV1v7nP/9Zt99+u0455RQNGjTI91gASktjY2Pyv/lUn332mef7brjhBs2ZM0ff/OY3deKJJ6qpqUlvvvmm3nrrLZ1xxhn61re+pU2bNum5557Tf/3Xf6W9Nx6P69xzz9ULL7ygyy+/XMcee6yeeeYZXX311dq4cWPy81OygvxHH31U3/jGN3TSSSfpxRdf1Nlnn+06LqfPx+eee07/93//p4kTJ6qqqkrvvPOO7r33Xr3zzjt69dVX024aSNKFF16oww8/XDfffLN+//vf66abblKPHj30q1/9Sqeddpp+9rOfacGCBfrBD36gE044QaeccorvdQZQnOzPwHg8rq1bt+oXv/iFdu7c2WbG984779S5556riy++WLt379aiRYt0/vnn63e/+12bz6Tnn39ejz76qK644gr16tVLAwcO1KZNm3TiiSfq448/1uTJk3XYYYdp48aNevzxx/XPf/5TnTt3Tr5/6tSp2n///TVr1iytXbtWdXV1uuKKK/TII48ktzH5u9S2Y8cOnXXWWRo/fry+/vWvq2/fvqqtrdXUqVPVtWtXXXfddZKkvn37+l6vhx9+WPvuu6+++tWvqkuXLjr44IO1YMGC5N+0mez/v7S0tOj//u//9MMf/lA9e/Zs90sGSkocyINnn302XlZWFi8rK4sPGzYsfs0118SfeeaZ+O7du9O2W716dbxTp07xr33ta/GWlpa01/bs2ZP89z//+c82x/jWt74V32effeKffvpp8rmzzz47fuCBB7bZ9o033ohLij/44INtjjF48OD4qFGj2hxv0KBB8TPOOCP53KxZs+KS4hMmTDC6BvF4PL5ly5b4XnvtFb/vvvuSz5188snx0aNHt9n2wAMPjEtq8/jiF78Y3759u/ExARS/Bx980PG/99THkUcemdz+wAMPjF966aXJ74855pj42Wef7XmMKVOmxJ3+t79kyZK4pPhNN92U9vy4cePisVgs/v7778fj8Xh85cqVcUnxadOmpW132WWXxSXFZ82alXzO6/PR6fP74YcfjkuKv/TSS232MXny5ORz//73v+PV1dXxWCwWv/nmm5PPf/TRR/EuXbqkXRMApcPtM7C8vDw+f/78Nttnfo7s3r07ftRRR8VPO+20tOclxTt16hR/55130p6/5JJL4p06dYq/8cYbbfZt//1nj2nkyJFpfxNeddVV8bKysvjHH3/sOp543Pnv0lNPPTUuKT5v3rw22x955JHxU089tc3zXj7/+c/HL7744uT3//mf/xnv1atX/LPPPkvb7tJLL3W8vgMGDIivXLky0DGRW6S1Iy/OOOMMrVixQueee67+53/+R7fccotGjRqlAQMG6P/9v/+X3G7JkiXas2ePZs6c2abYUepsSpcuXZL//uSTT7R9+3YNHz5c//znP/W3v/0t9DhXrVql1atX66KLLtKOHTu0fft2bd++Xbt27dLpp5+ul156qU119W9/+9vG+1+0aJE6deqksWPHJp+bMGGCnn76aX300Udtth86dKiee+45Pffcc/rd736nn/zkJ3rnnXd07rnn6l//+lfo8wRQnObOnZv8bz71cfTRR3u+r3v37nrnnXe0evXqwMf8wx/+oLKyMl155ZVpz3//+99XPB5PVkq2U0G/+93vpm3nVdDT6fMx9fP7008/1fbt23XSSSdJkt56660223/zm99M/rusrEzHH3+84vG4Lr/88uTz3bt316GHHqr/+7//cx0LgOKX+hn40EMPacSIEfrmN7+pxYsXp22X+jny0UcfqbGxUcOHD3f8DDn11FN1xBFHJL/fs2ePlixZonPOOSdtfbstM3tn8uTJac8NHz5cLS0t+sc//uE4Hr+/S8vLyzVx4kS/S+HrL3/5i/76179qwoQJyecmTJig7du365lnnmmzfUVFRfLaPvPMM/rVr36lrl276itf+Yr+/ve/Zz0eRIO0duTNCSecoMWLF2v37t36n//5Hz355JO64447NG7cOK1atUpHHHGEPvjgA3Xq1CntQ9TJO++8o+uvv17PP/+8mpqa0l5rbGwMPUb7D9tLL73UdZvGxkbtv//+ye+DpJfba+l37NiRXF953HHHaffu3Xrsscc0efLktO179eqVVizu7LPP1qGHHqpx48bp17/+dc6q3AMojBNPPNHxj8X999/fMd3dduONN2r06NH63Oc+p6OOOkpnnnmmvvGNb/gG9ZL0j3/8Q/3799d+++2X9vzhhx+efN3+2qlTpzafeYcccojrvp0+Hz/88EPNnj1bixYtalMQ1Onz+4ADDkj7vrKyUhUVFerVq1eb5zPXrQMoLZmfgRMmTNBxxx2nK664Ql/96leT6ea/+93vdNNNN2nVqlVqbm5Obp8ZWEttP4e2bdumpqYm4/aUmZ9B9t+AqZMqQf4uHTBgQFrafFgPPfSQ9t13Xx100EF6//33JVkB+MCBA7VgwYI26f1lZWVtChB/5Stf0eDBgzVjxgw98cQTWY8J2SM4R9517txZJ5xwgk444QR97nOf08SJE/XYY49p1qxZRu//+OOPdeqpp6pbt2668cYbdfDBB6uiokJvvfWWfvjDH7r2DTdhv/fWW291bbHWtWvXtO9T75Z6Wb16td544w1JcqyyvmDBgjbBuZPTTz9dkvTSSy8RnAOQJJ1yyin64IMPtHTpUj377LP69a9/rTvuuEPz5s1Lm3nON6fPxwsuuECvvPKKrr76ah177LHq2rWr9uzZozPPPNPx87usrMzoOUlGdT8AlI5OnTppxIgRuvPOO7V69WodeeSRevnll3XuuefqlFNO0d13361+/fpp77331oMPPqiFCxe22Yfp32lu/D5vgv5dmu147GM//PDD2rVrl+OE1tatW7Vz5842f7Nmqq6u1qGHHqqXXnop6zEhGgTnKCj77ujmzZslSQcffLD27Nmjd9991zU4rq+v144dO7R48eK0wj9r1qxps63THVSv5w8++GBJUrdu3Vzbm4W1YMEC7b333vqv//qvNh/0f/rTn3TXXXdp3bp1be7QZvr3v/8tSdq5c2ek4wNQ2nr06KGJEydq4sSJ2rlzp0455RTdcMMNyeDc7XPvwAMP1B//+Ed98sknabPndirmgQcemPy6Z88erVmzJu0Goz1jY+Kjjz7S8uXLNXv2bM2cOTP5fJh0fAAdQ+bfPU888YQqKir0zDPPpLWVfPDBB43217t3b3Xr1k1vv/12JOML8nepF7fPaCcvvviiNmzYoBtvvDGZ5WT76KOPNHnyZC1ZsqRNIT0n//73v/mbsoiw5hx58cILLzjOaPzhD3+QJB166KGSpPPOO0+dOnXSjTfe2OZOo/1+O7BN3d/u3bt19913t9n/vvvu65gmaffa/fjjj9OeHzJkiA4++GDddtttjh9Uma0zgliwYIGGDx+uCy+8UOPGjUt7XH311ZKsqpt+nnrqKUnSMcccE3osANqXzHTurl276pBDDklL93T73PvKV76ilpYW/fKXv0x7/o477lAsFtNZZ50lSRo1apQktfms/cUvfmE8TqfPb0mqq6sz3geAjuOzzz7Ts88+q86dOyeD0LKyMsVisbQ2ZWvXrtWSJUuM9tmpUyedd955euqpp/Tmm2+2eT1oBk6Qv0u97Lvvvm0+n93YKe1XX311m78pJ02apMGDB2vBggW++/n73/+u9957j78piwgz58iLqVOn6p///Ke+9rWv6bDDDtPu3bv1yiuv6JFHHtHAgQOThTEOOeQQXXfddfrxj3+s4cOHa8yYMSovL9cbb7yh/v37a86cOTr55JO1//7769JLL9WVV16pWCym//qv/3L8MB0yZIgeeeQRTZ8+XSeccIK6du2qc845RwcffLC6d++uefPmab/99tO+++6roUOHatCgQfr1r3+ts846S0ceeaQmTpyoAQMGaOPGjXrhhRfUrVu3ZHAcxGuvvab3339fV1xxhePrAwYM0Be+8AUtWLBAP/zhD5PPb9y4UQ899JAkJdfq/+pXv1KvXr1IaQeQdMQRR6i2tlZDhgxRjx499Oabb+rxxx9P+8wZMmSIJOnKK6/UqFGjVFZWpvHjx+ucc87RiBEjdN1112nt2rU65phj9Oyzz2rp0qWaNm1aMqNoyJAhGjt2rOrq6rRjx45kKzW7kJDJrE+3bt10yimn6JZbbtFnn32mAQMG6Nlnnw08wwSgfXr66aeTWTtbt27VwoULtXr1al177bXq1q2bJKv+zu23364zzzxTF110kbZu3aq5c+fqkEMO0V/+8hej4/z0pz/Vs88+q1NPPVWTJ0/W4Ycfrs2bN+uxxx7Tn/70J3Xv3t14zEH+LvUyZMgQ3XPPPbrpppt0yCGHqE+fPjrttNPabNfc3KwnnnhCZ5xxhioqKhz3de655+rOO+/U1q1b1adPH0nWDLn9N+WePXu0du1azZs3T3v27DFeWoo8KEiNeHQ4Tz/9dPw//uM/4ocddli8a9eu8c6dO8cPOeSQ+NSpU+Nbtmxps/0DDzwQP+644+Ll5eXx/fffP37qqafGn3vuueTr//3f/x0/6aST4l26dIn3798/2ZpNUvyFF15Ibrdz5874RRddFO/evXtcUlpbtaVLl8aPOOKI+F577dWmrdqf//zn+JgxY+I9e/aMl5eXxw888MD4BRdcEF++fHlyG7vNz7Zt23zPf+rUqXFJ8Q8++MB1mxtuuCEuKf4///M/8Xi8bSu1Tp06xfv06ROfMGFCsrURgPbBbtnj1NYnHrfa73i1UrvpppviJ554Yrx79+7xLl26xA877LD4T37yk7R2lf/+97/jU6dOjffu3Tsei8XS2qp98skn8auuuirev3//+N577x0fPHhw/NZbb01rHxSPx+O7du2KT5kyJd6jR494165d4+edd178vffei0tKa23m9fm4YcOG+Ne+9rV49+7d45WVlfHzzz8/vmnTJtd2bJn7uPTSS+P77ruv7zUCUDqcWqlVVFTEjz322Pg999zT5rPo/vvvjw8ePDheXl4eP+yww+IPPvhg8jMjlaT4lClTHI/5j3/8I37JJZfEe/fuHS8vL48fdNBB8SlTpsSbm5vTxpT5ufzCCy+0+XvT9O9Sr8+phoaG+Nlnnx3fb7/94pJc26o98cQTcUnx+++/3/H1eDwer6+vj0uK33nnnfF43LmVWrdu3eKnn356/I9//KPrfpB/sXic6ikAACCcVatW6bjjjtNDDz2kiy++uNDDAQCgZLHmHAAAGPnXv/7V5rm6ujp16tQprRASAAAIjjXnAADAyC233KKVK1dqxIgR2muvvfT000/r6aef1uTJk1VTU1Po4QEAUNJIawcAAEaee+45zZ49W++++6527typAw44QN/4xjd03XXXaa+9uN8PAEA2CM4BAAAAACgw1pwDAAAAAFBgBOcAAAAAABRYh1ogtmfPHm3atEn77befYrFYoYcDoMTE43F98skn6t+/vzp1al/3Nvl8BJCt9voZyecjgGyZfj52qOB806ZNVJMFkLX169erurq60MOIFJ+PAKLS3j4j+XwEEBW/z8cOFZzvt99+kqyL0q1btwKPBkCpaWpqUk1NTfKzpD3h8xFAttrrZySfjwCyZfr52KGCczsVqVu3bny4AgitPaY18vkIICrt7TOSz0cAUfH7fGw/C4IAAAAAAChRBOcAAAAAABQYwTkAAAAAAAVGcA4AAAAAQIERnAMAAAAAUGAE5wAAAAAAFBjBOQAAAAAABUZwDgAAAABAgRGcAwAAAABQYATnAAAAAAAUGME5AAAAAAAFRnAOAAAAAECBEZwDQAnYuHGjvv71r6tnz57q0qWLPv/5z+vNN99Mvh6PxzVz5kz169dPXbp00ciRI7V69eoCjhgAAABBEJwDQJH76KOP9MUvflF77723nn76ab377rv6+c9/rv333z+5zS233KK77rpL8+bN02uvvaZ9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RHAOBPGypA0er8clrU9sBwAAAACGCM6BIDZHvB0AAJAkvfTSSzrnnHPUv39/xWIxLVmyxHP7xYsX64wzzlDv3r3VrVs3DRs2TM8880zaNjfccINisVja47DDDsvhWQBAeATnQBD9It4OAABIknbt2qVjjjlGc+fONdr+pZde0hlnnKE//OEPWrlypUaMGKFzzjlHf/7zn9O2O/LII7V58+bk409/+lMuhg8AWSuZgnBAURguqVpW8TendeexxOvD8zkoAABK31lnnaWzzjrLePu6urq073/6059q6dKleuqpp3Tccccln99rr71UVVUV1TABIGeYOQeCKJN0Z+LfsYzX7O/rRL9zAADybM+ePfrkk0/Uo0ePtOdXr16t/v3766CDDtLFF1+sdevWee6nublZTU1NaQ8AyAeCcyCoMbLapQ3IeL5a4dqotUiql/Rw4iuV3gEACOy2227Tzp07dcEFFySfGzp0qObPn69ly5bpnnvu0Zo1azR8+HB98sknrvuZM2eOKisrk4+ampp8DB8ASGsHQhkjabSsquybZa0xH67gM+aLZbVmS60AXy1rdr499UpvUfbXCgAAFwsXLtTs2bO1dOlS9enTJ/l8apr80UcfraFDh+rAAw/Uo48+qssvv9xxXzNmzND06dOT3zc1NRGgA8gLgnMgrDJJtVm8f7GkcWq7dn1j4vkws/DFqKPcgAAAFMSiRYv0zW9+U4899phGjhzpuW337t31uc99Tu+//77rNuXl5SovL496mADgi7R2oBBaZAWsTkXl7OemqfRT3O0bEJm94e0bEIvzPiIAQDvy8MMPa+LEiXr44Yd19tln+26/c+dOffDBB+rXj7YqAIoPwTlQCC+rbcCaKi5pfWK7UtVRbkAAACKxc+dOrVq1SqtWrZIkrVmzRqtWrUoWcJsxY4YuueSS5PYLFy7UJZdcop///OcaOnSoGhoa1NDQoMbGxuQ2P/jBD/Tiiy9q7dq1euWVV/S1r31NZWVlmjBhQl7PDQBMEJwDhbA54u2KUUe4AQGUslgs+APIoTfffFPHHXdcsg3a9OnTddxxx2nmzJmSpM2bN6dVWr/33nv173//W1OmTFG/fv2Sj+9973vJbTZs2KAJEybo0EMP1QUXXKCePXvq1VdfVe/evfN7cgBggDXnQCGYZtOVctZdR7gBAQCITG1treJxp3Qr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+9h777113HHH6f3335ek5PuC7LO8vFzdunVLewBAPhgH5yeddJLuu+8+bd68Wd/61re0aNEi9e/fX3v27NFzzz2nTz4xnW5DUcpVSnE2+/2u/INnr/ZibnLVkisfBdlsqYXZdsuare9h+F775shoBV+n3g4KtOUan5UASlWhP786d+6sIUOGaPny5cnn9uzZo+XLl6fNjntpaWnRX//6V/XrZ/3PftCgQaqqqkrbZ1NTk1577TXjfQJA3sSz8Le//S1+9dVXx6uqquIVFRXxc845J5vd5VxjY2NcUryxsbHQQ4Gpq+PxuCJ6xOLxeE08Hv93Dsb573g8Xh1yTNmeV2/D7abF4/EXUs7/hRDHqonH409kf7lKVdjPkFL4rOTzschIPEr50Y4E+fyK4nNk0aJF8fLy8vj8+fPj7777bnzy5Mnx7t27xxsaGuLxeDz+jW98I37ttdcmt589e3b8mWeeiX/wwQfxlStXxsePHx+vqKiIv/POO8ltbr755nj37t3jS5cujf/lL3+Jjx49Oj5o0KD4v/71L6Mx8fkIIFumnyNZ9Tk/9NBDdcstt2jDhg16+OGHs79TgPYntd94vYK337pF0tVqO0tbJqlriPHUOewrCLfzCVuQLcistRu/lPSestqt3aH0VH7TderXqzgKtGX7u1RAfFYCKFX5/vy68MILddttt2nmzJk69thjtWrVKi1btixZ0G3dunXavLn1f2AfffSRJk2apMMPP1xf+cpX1NTUpFdeeSWtsvw111yjqVOnavLkyTrhhBO0c+dOLVu2TBUVFTk/HwAIIhaPx6MID0pCU1OTKisr1djYyPqhfFgs59ZYqYXMTO2WVb39A1lr0Y+QNCrgPq6WFeyH5XU+zbKqsRerJ9T2mtfLWhvv5wUVvkhblL9LWSjUZ8g999yje+65R2vXrpUkHXnkkZo5c6bOOussSdKnn36q73//+1q0aJGam5s1atQo3X333W2qE3vh87HIxMKs2UHR6Dh/WqVpr58j7fW8AOSP6edIVjPngCu39deZhcxMdZa1vvoXia87QoxpkcLPtvqdz+qQ+82HmKxrlnnuuWqjF7Wof5dKUHV1tW6++WatXLlSb775pk477TSNHj1a77zzjiTpqquu0lNPPaXHHntML774ojZt2qQxY0qsBx0AAEAHx8w53NktwTYrWNuxFlkVy93S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OnXSyJEjtWLFCqN9/POf/9Rnn32mHj16pD1fX1+vPn366NBDD9V3vvMd7djhfue8ublZTU1NaQ8AyAeCcyCTV2/yTG5rve3g/sMAx62RdHfi39kG6E7jChtgu92ooAgdACBC27dvV0tLi/r27Zv2fN++fdXQ0GC0jx/+8Ifq379/WoB/5pln6re//a2WL1+un/3sZ3rxxRd11llnqaXF+Q71nDlzVFlZmXzU1NSEPykACIDgHMjk15s8U2qvcilYcG+LyarYPk7ORehMisp5jStsgO11LhShAwAUkZtvvlmLFi3Sk08+qYqKiuTz48eP17nnnqvPf/7zOu+88/S73/1Ob7zxhurr6x33M2PGDDU2NiYf69evz9MZAOjoCM6BTKa9yd3eFzS476n06u9OlewfCTkmyQrAwwbYfueSeWMin8Km6AMAilKvXr1UVlamLVu2pD2/ZcsW3/Xit912m26++WY9++yzOvrooz23Peigg9SrVy+9//77jq+Xl5erW7duaQ8AyAeCc7R/QYM4097kbu8zDe67SpotaYvaFm7LbG9XK6v4XJh0920KH2CbnkvYGxphsQYeANqdzp07a8iQIVq+fHnyuT179mj58uUaNmyY6/tuueUW/fjHP9ayZct0/PHH+x5nw4YN2rFjh/r1C/s/fADIDYJztB9OQXiYIG64ggXCMVnrxYcnvjf9f/0SSTNlVvG8TFb1dft4QcbV23B7pwDb9Fzy+fcNa+ABoN2aPn267rvvPv3mN7/R//7v/+o73/mOdu3alazefskll2jGjBnJ7X/2s5/pRz/6kR544AENHDhQDQ0Namho0M6dOyVJO3fu1NVXX61XX31Va9eu1fLlyzV69GgdcsghGjVqVEHOEQDc0EoN7YNT27Oecm5jZgdxqankqexAeJysANdr7bgdKNepNci2g/uNLu+NJV6v9divkzGy0tu/K2m7z7ap4+rhsV0qpwDb9FyGO7yWC35r4GOyUvRHizZvAFCCLrzwQm3btk0zZ85UQ0ODjj32WC1btixZJG7dunXq1Kl1bumee+7R7t27NW7cuLT9zJo1SzfccIPKysr0l7/8Rb/5zW/08ccfq3///vryl7+sH//4x/Q6B1B0YvF4PEjZqpLW1NSkyspKNTY2sn6oPbFnUoMWYKuWtEbuQZxJn/MaWQFwZpBvj0kZ47KDZrcb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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dfm.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "p9AgZEnbLwMm",
        "outputId": "731a5d65-e237-4c9d-89a0-dea37c7eacb4"
      },
      "execution_count": 66,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          A         B     C         D        E        Q\n",
              "0  1.171349 -0.324963  True  0.647244  2.71875    above\n",
              "1  0.613882  1.391752  True  1.538499  2.71875  average\n",
              "2  0.758237 -1.485440  True  0.492977  2.71875    above\n",
              "3  0.603095  1.218984  True  0.699745  2.71875  average\n",
              "4  1.448821  2.099334  True  0.146901  2.71875    above"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-9ea6fcd8-a8b1-44ed-b1f1-d0ec6c5cf5b1\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>A</th>\n",
              "      <th>B</th>\n",
              "      <th>C</th>\n",
              "      <th>D</th>\n",
              "      <th>E</th>\n",
              "      <th>Q</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1.171349</td>\n",
              "      <td>-0.324963</td>\n",
              "      <td>True</td>\n",
              "      <td>0.647244</td>\n",
              "      <td>2.71875</td>\n",
              "      <td>above</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.613882</td>\n",
              "      <td>1.391752</td>\n",
              "      <td>True</td>\n",
              "      <td>1.538499</td>\n",
              "      <td>2.71875</td>\n",
              "      <td>average</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.758237</td>\n",
              "      <td>-1.485440</td>\n",
              "      <td>True</td>\n",
              "      <td>0.492977</td>\n",
              "      <td>2.71875</td>\n",
              "      <td>above</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.603095</td>\n",
              "      <td>1.218984</td>\n",
              "      <td>True</td>\n",
              "      <td>0.699745</td>\n",
              "      <td>2.71875</td>\n",
              "      <td>average</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1.448821</td>\n",
              "      <td>2.099334</td>\n",
              "      <td>True</td>\n",
              "      <td>0.146901</td>\n",
              "      <td>2.71875</td>\n",
              "      <td>above</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9ea6fcd8-a8b1-44ed-b1f1-d0ec6c5cf5b1')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-9ea6fcd8-a8b1-44ed-b1f1-d0ec6c5cf5b1 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-9ea6fcd8-a8b1-44ed-b1f1-d0ec6c5cf5b1');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-08c6105b-9350-47fe-a7dd-ccfa6f710f64\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-08c6105b-9350-47fe-a7dd-ccfa6f710f64')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-08c6105b-9350-47fe-a7dd-ccfa6f710f64 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "dfm",
              "summary": "{\n  \"name\": \"dfm\",\n  \"rows\": 500,\n  \"fields\": [\n    {\n      \"column\": \"A\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0257871499055464,\n        \"min\": -3.4974043312939913,\n        \"max\": 2.7339531190874813,\n        \"num_unique_values\": 500,\n        \"samples\": [\n          -0.4246898071540841,\n          -0.7242700421730034,\n          -2.2237408069127693\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"B\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.9717347996987148,\n        \"min\": -3.047574914034872,\n        \"max\": 2.3226297931596833,\n        \"num_unique_values\": 500,\n        \"samples\": [\n          1.0845034786078773,\n          0.3383241588492323,\n          -2.9811489628330468\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"C\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          false,\n          true\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"D\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.9792249827269495,\n        \"min\": -2.8975264220760057,\n        \"max\": 2.7166463710052122,\n        \"num_unique_values\": 500,\n        \"samples\": [\n          0.7898375005663657,\n          -1.3064232372392137\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"E\",\n      \"properties\": {\n        \"dtype\": \"float16\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0,\n          2.71875\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Q\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"average\",\n          \"medium\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 66
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "r, c = dfm.shape"
      ],
      "metadata": {
        "id": "B5-3mqlALzze"
      },
      "execution_count": 97,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "r,c"
      ],
      "metadata": {
        "id": "9YuaA2-5uSTo",
        "outputId": "161911a4-f2f8-4328-fde4-f89caabdb65c",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 98,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(500, 6)"
            ]
          },
          "metadata": {},
          "execution_count": 98
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dfm3 = pd.DataFrame(data = np.linspace(0, 10,\n",
        "                                       r*c).reshape(dfm.shape),\n",
        "                    columns = [\"a\", \"b\", \"c\", \"d\", \"f\", \"h\"])"
      ],
      "metadata": {
        "id": "px29GPpZL29R"
      },
      "execution_count": 68,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dfm3.head(3)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 143
        },
        "id": "FJoRmHnRL7MO",
        "outputId": "52fa0faf-7e91-4bae-931e-3e3817b77dbe"
      },
      "execution_count": 69,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          a         b         c         d         f         h\n",
              "0  0.000000  0.003334  0.006669  0.010003  0.013338  0.016672\n",
              "1  0.020007  0.023341  0.026676  0.030010  0.033344  0.036679\n",
              "2  0.040013  0.043348  0.046682  0.050017  0.053351  0.056686"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d47979e6-80e8-4c8c-9362-dfcb4dd760a3\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>a</th>\n",
              "      <th>b</th>\n",
              "      <th>c</th>\n",
              "      <th>d</th>\n",
              "      <th>f</th>\n",
              "      <th>h</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.003334</td>\n",
              "      <td>0.006669</td>\n",
              "      <td>0.010003</td>\n",
              "      <td>0.013338</td>\n",
              "      <td>0.016672</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.020007</td>\n",
              "      <td>0.023341</td>\n",
              "      <td>0.026676</td>\n",
              "      <td>0.030010</td>\n",
              "      <td>0.033344</td>\n",
              "      <td>0.036679</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.040013</td>\n",
              "      <td>0.043348</td>\n",
              "      <td>0.046682</td>\n",
              "      <td>0.050017</td>\n",
              "      <td>0.053351</td>\n",
              "      <td>0.056686</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d47979e6-80e8-4c8c-9362-dfcb4dd760a3')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-d47979e6-80e8-4c8c-9362-dfcb4dd760a3 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-d47979e6-80e8-4c8c-9362-dfcb4dd760a3');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-c156fb3b-7c6b-4abd-9a8c-87fbc61afe7a\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c156fb3b-7c6b-4abd-9a8c-87fbc61afe7a')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-c156fb3b-7c6b-4abd-9a8c-87fbc61afe7a button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "dfm3",
              "summary": "{\n  \"name\": \"dfm3\",\n  \"rows\": 500,\n  \"fields\": [\n    {\n      \"column\": \"a\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.8906001887562294,\n        \"min\": 0.0,\n        \"max\": 9.983327775925309,\n        \"num_unique_values\": 500,\n        \"samples\": [\n          7.222407469156385,\n          1.460486828942981,\n          7.482494164721574\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"b\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.8906001887562294,\n        \"min\": 0.003334444814938313,\n        \"max\": 9.986662220740246,\n        \"num_unique_values\": 500,\n        \"samples\": [\n          7.225741913971324,\n          1.4638212737579193,\n          7.4858286095365125\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"c\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.890600188756229,\n        \"min\": 0.006668889629876626,\n        \"max\": 9.989996665555186,\n        \"num_unique_values\": 500,\n        \"samples\": [\n          7.229076358786262,\n          1.4671557185728576,\n          7.489163054351451\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"d\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.8906001887562294,\n        \"min\": 0.010003334444814937,\n        \"max\": 9.993331110370123,\n        \"num_unique_values\": 500,\n        \"samples\": [\n          7.2324108036012005,\n          1.470490163387796,\n          7.492497499166388\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"f\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.89060018875623,\n        \"min\": 0.013337779259753251,\n        \"max\": 9.996665555185063,\n        \"num_unique_values\": 500,\n        \"samples\": [\n          7.235745248416139,\n          1.4738246082027342,\n          7.495831943981327\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"h\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.89060018875623,\n        \"min\": 0.016672224074691565,\n        \"max\": 10.0,\n        \"num_unique_values\": 500,\n        \"samples\": [\n          7.239079693231077,\n          1.4771590530176726,\n          7.499166388796265\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 69
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dfm3.head(7)"
      ],
      "metadata": {
        "id": "0jPi6ge0uh71",
        "outputId": "69129a16-b1bf-4306-ba5b-ac7d539d6cbf",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 268
        }
      },
      "execution_count": 99,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          a         b         c         d         f         h\n",
              "0  0.000000  0.003334  0.006669  0.010003  0.013338  0.016672\n",
              "1  0.020007  0.023341  0.026676  0.030010  0.033344  0.036679\n",
              "2  0.040013  0.043348  0.046682  0.050017  0.053351  0.056686\n",
              "3  0.060020  0.063354  0.066689  0.070023  0.073358  0.076692\n",
              "4  0.080027  0.083361  0.086696  0.090030  0.093364  0.096699\n",
              "5  0.100033  0.103368  0.106702  0.110037  0.113371  0.116706\n",
              "6  0.120040  0.123374  0.126709  0.130043  0.133378  0.136712"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c5bc3c4e-ca05-41db-89de-963241d55af0\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>a</th>\n",
              "      <th>b</th>\n",
              "      <th>c</th>\n",
              "      <th>d</th>\n",
              "      <th>f</th>\n",
              "      <th>h</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.003334</td>\n",
              "      <td>0.006669</td>\n",
              "      <td>0.010003</td>\n",
              "      <td>0.013338</td>\n",
              "      <td>0.016672</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.020007</td>\n",
              "      <td>0.023341</td>\n",
              "      <td>0.026676</td>\n",
              "      <td>0.030010</td>\n",
              "      <td>0.033344</td>\n",
              "      <td>0.036679</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.040013</td>\n",
              "      <td>0.043348</td>\n",
              "      <td>0.046682</td>\n",
              "      <td>0.050017</td>\n",
              "      <td>0.053351</td>\n",
              "      <td>0.056686</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.060020</td>\n",
              "      <td>0.063354</td>\n",
              "      <td>0.066689</td>\n",
              "      <td>0.070023</td>\n",
              "      <td>0.073358</td>\n",
              "      <td>0.076692</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.080027</td>\n",
              "      <td>0.083361</td>\n",
              "      <td>0.086696</td>\n",
              "      <td>0.090030</td>\n",
              "      <td>0.093364</td>\n",
              "      <td>0.096699</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>0.100033</td>\n",
              "      <td>0.103368</td>\n",
              "      <td>0.106702</td>\n",
              "      <td>0.110037</td>\n",
              "      <td>0.113371</td>\n",
              "      <td>0.116706</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>0.120040</td>\n",
              "      <td>0.123374</td>\n",
              "      <td>0.126709</td>\n",
              "      <td>0.130043</td>\n",
              "      <td>0.133378</td>\n",
              "      <td>0.136712</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c5bc3c4e-ca05-41db-89de-963241d55af0')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-c5bc3c4e-ca05-41db-89de-963241d55af0 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-c5bc3c4e-ca05-41db-89de-963241d55af0');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-8cd554ba-fef8-4e5d-8c03-7064ec32d214\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8cd554ba-fef8-4e5d-8c03-7064ec32d214')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-8cd554ba-fef8-4e5d-8c03-7064ec32d214 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "dfm3",
              "summary": "{\n  \"name\": \"dfm3\",\n  \"rows\": 500,\n  \"fields\": [\n    {\n      \"column\": \"a\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.8906001887562294,\n        \"min\": 0.0,\n        \"max\": 9.983327775925309,\n        \"num_unique_values\": 500,\n        \"samples\": [\n          7.222407469156385,\n          1.460486828942981,\n          7.482494164721574\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"b\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.8906001887562294,\n        \"min\": 0.003334444814938313,\n        \"max\": 9.986662220740246,\n        \"num_unique_values\": 500,\n        \"samples\": [\n          7.225741913971324,\n          1.4638212737579193,\n          7.4858286095365125\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"c\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.890600188756229,\n        \"min\": 0.006668889629876626,\n        \"max\": 9.989996665555186,\n        \"num_unique_values\": 500,\n        \"samples\": [\n          7.229076358786262,\n          1.4671557185728576,\n          7.489163054351451\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"d\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.8906001887562294,\n        \"min\": 0.010003334444814937,\n        \"max\": 9.993331110370123,\n        \"num_unique_values\": 500,\n        \"samples\": [\n          7.2324108036012005,\n          1.470490163387796,\n          7.492497499166388\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"f\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.89060018875623,\n        \"min\": 0.013337779259753251,\n        \"max\": 9.996665555185063,\n        \"num_unique_values\": 500,\n        \"samples\": [\n          7.235745248416139,\n          1.4738246082027342,\n          7.495831943981327\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"h\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.89060018875623,\n        \"min\": 0.016672224074691565,\n        \"max\": 10.0,\n        \"num_unique_values\": 500,\n        \"samples\": [\n          7.239079693231077,\n          1.4771590530176726,\n          7.499166388796265\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 99
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "merged_df = pd.merge(left = dfm,\n",
        "                     right = dfm3,\n",
        "                     how = \"cross\")"
      ],
      "metadata": {
        "id": "8mbhj3Y-L-GP"
      },
      "execution_count": 100,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "merged_df.head(10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 383
        },
        "id": "YvGRMzEAMBKM",
        "outputId": "c42e6dc3-4d67-48b3-d38d-71ffcd5d03f0"
      },
      "execution_count": 101,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          A         B     C         D        E      Q         a         b  \\\n",
              "0  1.171349 -0.324963  True  0.647244  2.71875  above  0.000000  0.003334   \n",
              "1  1.171349 -0.324963  True  0.647244  2.71875  above  0.020007  0.023341   \n",
              "2  1.171349 -0.324963  True  0.647244  2.71875  above  0.040013  0.043348   \n",
              "3  1.171349 -0.324963  True  0.647244  2.71875  above  0.060020  0.063354   \n",
              "4  1.171349 -0.324963  True  0.647244  2.71875  above  0.080027  0.083361   \n",
              "5  1.171349 -0.324963  True  0.647244  2.71875  above  0.100033  0.103368   \n",
              "6  1.171349 -0.324963  True  0.647244  2.71875  above  0.120040  0.123374   \n",
              "7  1.171349 -0.324963  True  0.647244  2.71875  above  0.140047  0.143381   \n",
              "8  1.171349 -0.324963  True  0.647244  2.71875  above  0.160053  0.163388   \n",
              "9  1.171349 -0.324963  True  0.647244  2.71875  above  0.180060  0.183394   \n",
              "\n",
              "          c         d         f         h  \n",
              "0  0.006669  0.010003  0.013338  0.016672  \n",
              "1  0.026676  0.030010  0.033344  0.036679  \n",
              "2  0.046682  0.050017  0.053351  0.056686  \n",
              "3  0.066689  0.070023  0.073358  0.076692  \n",
              "4  0.086696  0.090030  0.093364  0.096699  \n",
              "5  0.106702  0.110037  0.113371  0.116706  \n",
              "6  0.126709  0.130043  0.133378  0.136712  \n",
              "7  0.146716  0.150050  0.153384  0.156719  \n",
              "8  0.166722  0.170057  0.173391  0.176726  \n",
              "9  0.186729  0.190063  0.193398  0.196732  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d6cec9b5-1409-4185-bcf5-6b58bc1193e5\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>A</th>\n",
              "      <th>B</th>\n",
              "      <th>C</th>\n",
              "      <th>D</th>\n",
              "      <th>E</th>\n",
              "      <th>Q</th>\n",
              "      <th>a</th>\n",
              "      <th>b</th>\n",
              "      <th>c</th>\n",
              "      <th>d</th>\n",
              "      <th>f</th>\n",
              "      <th>h</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1.171349</td>\n",
              "      <td>-0.324963</td>\n",
              "      <td>True</td>\n",
              "      <td>0.647244</td>\n",
              "      <td>2.71875</td>\n",
              "      <td>above</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.003334</td>\n",
              "      <td>0.006669</td>\n",
              "      <td>0.010003</td>\n",
              "      <td>0.013338</td>\n",
              "      <td>0.016672</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1.171349</td>\n",
              "      <td>-0.324963</td>\n",
              "      <td>True</td>\n",
              "      <td>0.647244</td>\n",
              "      <td>2.71875</td>\n",
              "      <td>above</td>\n",
              "      <td>0.020007</td>\n",
              "      <td>0.023341</td>\n",
              "      <td>0.026676</td>\n",
              "      <td>0.030010</td>\n",
              "      <td>0.033344</td>\n",
              "      <td>0.036679</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1.171349</td>\n",
              "      <td>-0.324963</td>\n",
              "      <td>True</td>\n",
              "      <td>0.647244</td>\n",
              "      <td>2.71875</td>\n",
              "      <td>above</td>\n",
              "      <td>0.040013</td>\n",
              "      <td>0.043348</td>\n",
              "      <td>0.046682</td>\n",
              "      <td>0.050017</td>\n",
              "      <td>0.053351</td>\n",
              "      <td>0.056686</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1.171349</td>\n",
              "      <td>-0.324963</td>\n",
              "      <td>True</td>\n",
              "      <td>0.647244</td>\n",
              "      <td>2.71875</td>\n",
              "      <td>above</td>\n",
              "      <td>0.060020</td>\n",
              "      <td>0.063354</td>\n",
              "      <td>0.066689</td>\n",
              "      <td>0.070023</td>\n",
              "      <td>0.073358</td>\n",
              "      <td>0.076692</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1.171349</td>\n",
              "      <td>-0.324963</td>\n",
              "      <td>True</td>\n",
              "      <td>0.647244</td>\n",
              "      <td>2.71875</td>\n",
              "      <td>above</td>\n",
              "      <td>0.080027</td>\n",
              "      <td>0.083361</td>\n",
              "      <td>0.086696</td>\n",
              "      <td>0.090030</td>\n",
              "      <td>0.093364</td>\n",
              "      <td>0.096699</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>1.171349</td>\n",
              "      <td>-0.324963</td>\n",
              "      <td>True</td>\n",
              "      <td>0.647244</td>\n",
              "      <td>2.71875</td>\n",
              "      <td>above</td>\n",
              "      <td>0.100033</td>\n",
              "      <td>0.103368</td>\n",
              "      <td>0.106702</td>\n",
              "      <td>0.110037</td>\n",
              "      <td>0.113371</td>\n",
              "      <td>0.116706</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>1.171349</td>\n",
              "      <td>-0.324963</td>\n",
              "      <td>True</td>\n",
              "      <td>0.647244</td>\n",
              "      <td>2.71875</td>\n",
              "      <td>above</td>\n",
              "      <td>0.120040</td>\n",
              "      <td>0.123374</td>\n",
              "      <td>0.126709</td>\n",
              "      <td>0.130043</td>\n",
              "      <td>0.133378</td>\n",
              "      <td>0.136712</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>1.171349</td>\n",
              "      <td>-0.324963</td>\n",
              "      <td>True</td>\n",
              "      <td>0.647244</td>\n",
              "      <td>2.71875</td>\n",
              "      <td>above</td>\n",
              "      <td>0.140047</td>\n",
              "      <td>0.143381</td>\n",
              "      <td>0.146716</td>\n",
              "      <td>0.150050</td>\n",
              "      <td>0.153384</td>\n",
              "      <td>0.156719</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>1.171349</td>\n",
              "      <td>-0.324963</td>\n",
              "      <td>True</td>\n",
              "      <td>0.647244</td>\n",
              "      <td>2.71875</td>\n",
              "      <td>above</td>\n",
              "      <td>0.160053</td>\n",
              "      <td>0.163388</td>\n",
              "      <td>0.166722</td>\n",
              "      <td>0.170057</td>\n",
              "      <td>0.173391</td>\n",
              "      <td>0.176726</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>1.171349</td>\n",
              "      <td>-0.324963</td>\n",
              "      <td>True</td>\n",
              "      <td>0.647244</td>\n",
              "      <td>2.71875</td>\n",
              "      <td>above</td>\n",
              "      <td>0.180060</td>\n",
              "      <td>0.183394</td>\n",
              "      <td>0.186729</td>\n",
              "      <td>0.190063</td>\n",
              "      <td>0.193398</td>\n",
              "      <td>0.196732</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d6cec9b5-1409-4185-bcf5-6b58bc1193e5')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-d6cec9b5-1409-4185-bcf5-6b58bc1193e5 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-d6cec9b5-1409-4185-bcf5-6b58bc1193e5');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-a8839fcb-88c7-4d7e-ab58-f605210973d4\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a8839fcb-88c7-4d7e-ab58-f605210973d4')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-a8839fcb-88c7-4d7e-ab58-f605210973d4 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "merged_df"
            }
          },
          "metadata": {},
          "execution_count": 101
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ar1, ar2 = np.arange(6), np.arange(4)"
      ],
      "metadata": {
        "id": "FQvKeuLiMEJK"
      },
      "execution_count": 102,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "ar1,arr2"
      ],
      "metadata": {
        "id": "-ushpux-vH_h",
        "outputId": "334cd9cf-ce2a-4c5c-8fce-d500822f4c94",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 103,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(array([0, 1, 2, 3, 4, 5]), array([1, 2, 4]))"
            ]
          },
          "metadata": {},
          "execution_count": 103
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Stacking np.arrays\n",
        "arr_ = np.hstack([ar1, ar2])"
      ],
      "metadata": {
        "id": "V00MvQ4lMHYX"
      },
      "execution_count": 73,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "arr_"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ipcVElt_MMIx",
        "outputId": "9d929c26-1dfc-4186-a9f6-05996437eac8"
      },
      "execution_count": 74,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0, 1, 2, 3, 4, 5, 0, 1, 2, 3])"
            ]
          },
          "metadata": {},
          "execution_count": 74
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#HOW TO CONCATINATE DataFrame in Pandas?"
      ],
      "metadata": {
        "id": "Av9vFwC4vh_Y"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dfm5 = pd.concat([dfm, dfm3], axis = 1) # Anaamanisha nini kuandika axis=1?"
      ],
      "metadata": {
        "id": "vFfQZRexMOj0"
      },
      "execution_count": 75,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dfm5.head(10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 383
        },
        "id": "gg9N0aN5MRh6",
        "outputId": "1c383690-bd3e-4b21-e264-2120d1203d03"
      },
      "execution_count": 76,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          A         B      C         D        E        Q         a         b  \\\n",
              "0  1.171349 -0.324963   True  0.647244  2.71875    above  0.000000  0.003334   \n",
              "1  0.613882  1.391752   True  1.538499  2.71875  average  0.020007  0.023341   \n",
              "2  0.758237 -1.485440   True  0.492977  2.71875    above  0.040013  0.043348   \n",
              "3  0.603095  1.218984   True  0.699745  2.71875  average  0.060020  0.063354   \n",
              "4  1.448821  2.099334   True  0.146901  2.71875    above  0.080027  0.083361   \n",
              "5 -0.697767  0.846904  False -1.434104  1.00000      low  0.100033  0.103368   \n",
              "6 -0.473285 -0.068257  False  0.781035  1.00000   medium  0.120040  0.123374   \n",
              "7 -1.219386  1.092668  False -0.247347  1.00000      low  0.140047  0.143381   \n",
              "8  0.727804  0.231510   True -0.680514  2.71875  average  0.160053  0.163388   \n",
              "9  0.670078 -1.409845   True -1.262134  2.71875  average  0.180060  0.183394   \n",
              "\n",
              "          c         d         f         h  \n",
              "0  0.006669  0.010003  0.013338  0.016672  \n",
              "1  0.026676  0.030010  0.033344  0.036679  \n",
              "2  0.046682  0.050017  0.053351  0.056686  \n",
              "3  0.066689  0.070023  0.073358  0.076692  \n",
              "4  0.086696  0.090030  0.093364  0.096699  \n",
              "5  0.106702  0.110037  0.113371  0.116706  \n",
              "6  0.126709  0.130043  0.133378  0.136712  \n",
              "7  0.146716  0.150050  0.153384  0.156719  \n",
              "8  0.166722  0.170057  0.173391  0.176726  \n",
              "9  0.186729  0.190063  0.193398  0.196732  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f8afc172-94d4-4f96-aa9b-4289eb8b8d0c\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>A</th>\n",
              "      <th>B</th>\n",
              "      <th>C</th>\n",
              "      <th>D</th>\n",
              "      <th>E</th>\n",
              "      <th>Q</th>\n",
              "      <th>a</th>\n",
              "      <th>b</th>\n",
              "      <th>c</th>\n",
              "      <th>d</th>\n",
              "      <th>f</th>\n",
              "      <th>h</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1.171349</td>\n",
              "      <td>-0.324963</td>\n",
              "      <td>True</td>\n",
              "      <td>0.647244</td>\n",
              "      <td>2.71875</td>\n",
              "      <td>above</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.003334</td>\n",
              "      <td>0.006669</td>\n",
              "      <td>0.010003</td>\n",
              "      <td>0.013338</td>\n",
              "      <td>0.016672</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.613882</td>\n",
              "      <td>1.391752</td>\n",
              "      <td>True</td>\n",
              "      <td>1.538499</td>\n",
              "      <td>2.71875</td>\n",
              "      <td>average</td>\n",
              "      <td>0.020007</td>\n",
              "      <td>0.023341</td>\n",
              "      <td>0.026676</td>\n",
              "      <td>0.030010</td>\n",
              "      <td>0.033344</td>\n",
              "      <td>0.036679</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.758237</td>\n",
              "      <td>-1.485440</td>\n",
              "      <td>True</td>\n",
              "      <td>0.492977</td>\n",
              "      <td>2.71875</td>\n",
              "      <td>above</td>\n",
              "      <td>0.040013</td>\n",
              "      <td>0.043348</td>\n",
              "      <td>0.046682</td>\n",
              "      <td>0.050017</td>\n",
              "      <td>0.053351</td>\n",
              "      <td>0.056686</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.603095</td>\n",
              "      <td>1.218984</td>\n",
              "      <td>True</td>\n",
              "      <td>0.699745</td>\n",
              "      <td>2.71875</td>\n",
              "      <td>average</td>\n",
              "      <td>0.060020</td>\n",
              "      <td>0.063354</td>\n",
              "      <td>0.066689</td>\n",
              "      <td>0.070023</td>\n",
              "      <td>0.073358</td>\n",
              "      <td>0.076692</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1.448821</td>\n",
              "      <td>2.099334</td>\n",
              "      <td>True</td>\n",
              "      <td>0.146901</td>\n",
              "      <td>2.71875</td>\n",
              "      <td>above</td>\n",
              "      <td>0.080027</td>\n",
              "      <td>0.083361</td>\n",
              "      <td>0.086696</td>\n",
              "      <td>0.090030</td>\n",
              "      <td>0.093364</td>\n",
              "      <td>0.096699</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>-0.697767</td>\n",
              "      <td>0.846904</td>\n",
              "      <td>False</td>\n",
              "      <td>-1.434104</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>low</td>\n",
              "      <td>0.100033</td>\n",
              "      <td>0.103368</td>\n",
              "      <td>0.106702</td>\n",
              "      <td>0.110037</td>\n",
              "      <td>0.113371</td>\n",
              "      <td>0.116706</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>-0.473285</td>\n",
              "      <td>-0.068257</td>\n",
              "      <td>False</td>\n",
              "      <td>0.781035</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>medium</td>\n",
              "      <td>0.120040</td>\n",
              "      <td>0.123374</td>\n",
              "      <td>0.126709</td>\n",
              "      <td>0.130043</td>\n",
              "      <td>0.133378</td>\n",
              "      <td>0.136712</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>-1.219386</td>\n",
              "      <td>1.092668</td>\n",
              "      <td>False</td>\n",
              "      <td>-0.247347</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>low</td>\n",
              "      <td>0.140047</td>\n",
              "      <td>0.143381</td>\n",
              "      <td>0.146716</td>\n",
              "      <td>0.150050</td>\n",
              "      <td>0.153384</td>\n",
              "      <td>0.156719</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>0.727804</td>\n",
              "      <td>0.231510</td>\n",
              "      <td>True</td>\n",
              "      <td>-0.680514</td>\n",
              "      <td>2.71875</td>\n",
              "      <td>average</td>\n",
              "      <td>0.160053</td>\n",
              "      <td>0.163388</td>\n",
              "      <td>0.166722</td>\n",
              "      <td>0.170057</td>\n",
              "      <td>0.173391</td>\n",
              "      <td>0.176726</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>0.670078</td>\n",
              "      <td>-1.409845</td>\n",
              "      <td>True</td>\n",
              "      <td>-1.262134</td>\n",
              "      <td>2.71875</td>\n",
              "      <td>average</td>\n",
              "      <td>0.180060</td>\n",
              "      <td>0.183394</td>\n",
              "      <td>0.186729</td>\n",
              "      <td>0.190063</td>\n",
              "      <td>0.193398</td>\n",
              "      <td>0.196732</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f8afc172-94d4-4f96-aa9b-4289eb8b8d0c')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-f8afc172-94d4-4f96-aa9b-4289eb8b8d0c button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-f8afc172-94d4-4f96-aa9b-4289eb8b8d0c');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-46762eec-2ad1-4af7-92c3-a1ab86f6a900\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-46762eec-2ad1-4af7-92c3-a1ab86f6a900')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-46762eec-2ad1-4af7-92c3-a1ab86f6a900 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "dfm5",
              "summary": "{\n  \"name\": \"dfm5\",\n  \"rows\": 500,\n  \"fields\": [\n    {\n      \"column\": \"A\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0257871499055464,\n        \"min\": -3.4974043312939913,\n        \"max\": 2.7339531190874813,\n        \"num_unique_values\": 500,\n        \"samples\": [\n          -0.4246898071540841,\n          -0.7242700421730034,\n          -2.2237408069127693\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"B\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.9717347996987148,\n        \"min\": -3.047574914034872,\n        \"max\": 2.3226297931596833,\n        \"num_unique_values\": 500,\n        \"samples\": [\n          1.0845034786078773,\n          0.3383241588492323,\n          -2.9811489628330468\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"C\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          false,\n          true\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"D\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.9792249827269495,\n        \"min\": -2.8975264220760057,\n        \"max\": 2.7166463710052122,\n        \"num_unique_values\": 500,\n        \"samples\": [\n          0.7898375005663657,\n          -1.3064232372392137\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"E\",\n      \"properties\": {\n        \"dtype\": \"float16\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0,\n          2.71875\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Q\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"average\",\n          \"medium\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"a\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.8906001887562294,\n        \"min\": 0.0,\n        \"max\": 9.983327775925309,\n        \"num_unique_values\": 500,\n        \"samples\": [\n          7.222407469156385,\n          1.460486828942981\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"b\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.8906001887562294,\n        \"min\": 0.003334444814938313,\n        \"max\": 9.986662220740246,\n        \"num_unique_values\": 500,\n        \"samples\": [\n          7.225741913971324,\n          1.4638212737579193\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"c\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.890600188756229,\n        \"min\": 0.006668889629876626,\n        \"max\": 9.989996665555186,\n        \"num_unique_values\": 500,\n        \"samples\": [\n          7.229076358786262,\n          1.4671557185728576\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"d\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.8906001887562294,\n        \"min\": 0.010003334444814937,\n        \"max\": 9.993331110370123,\n        \"num_unique_values\": 500,\n        \"samples\": [\n          7.2324108036012005,\n          1.470490163387796\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"f\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.89060018875623,\n        \"min\": 0.013337779259753251,\n        \"max\": 9.996665555185063,\n        \"num_unique_values\": 500,\n        \"samples\": [\n          7.235745248416139,\n          1.4738246082027342\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"h\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.89060018875623,\n        \"min\": 0.016672224074691565,\n        \"max\": 10.0,\n        \"num_unique_values\": 500,\n        \"samples\": [\n          7.239079693231077,\n          1.4771590530176726\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 76
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "cFYEQm0Pxvo3"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dfc = pd.DataFrame(data = np.random.randn(1000).reshape(500, 2),\n",
        "                   columns = [\"H\", \"G\"])"
      ],
      "metadata": {
        "id": "5zy0CoiAMT2w"
      },
      "execution_count": 77,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dfc.head(2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 112
        },
        "id": "wQcEjcGCMXV1",
        "outputId": "abd0959b-0586-4676-9972-28cc711bb5a0"
      },
      "execution_count": 106,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          H         G\n",
              "0  0.566532 -0.408394\n",
              "1  0.341771 -0.773034"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-18371a45-166d-45e6-aab2-1c008791213c\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>H</th>\n",
              "      <th>G</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.566532</td>\n",
              "      <td>-0.408394</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.341771</td>\n",
              "      <td>-0.773034</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-18371a45-166d-45e6-aab2-1c008791213c')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-18371a45-166d-45e6-aab2-1c008791213c button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-18371a45-166d-45e6-aab2-1c008791213c');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-be194a08-156e-45e1-953d-17468b11cc7c\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-be194a08-156e-45e1-953d-17468b11cc7c')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-be194a08-156e-45e1-953d-17468b11cc7c button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "dfc",
              "summary": "{\n  \"name\": \"dfc\",\n  \"rows\": 500,\n  \"fields\": [\n    {\n      \"column\": \"H\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0060964355619422,\n        \"min\": -3.232381584812308,\n        \"max\": 2.941974357698652,\n        \"num_unique_values\": 500,\n        \"samples\": [\n          -0.6030637494833756,\n          1.5441638317889714,\n          0.9606269190336574\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"G\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.9955748913779482,\n        \"min\": -3.414528739180445,\n        \"max\": 2.9810301642838106,\n        \"num_unique_values\": 500,\n        \"samples\": [\n          1.9640194844062706,\n          0.292730141247064,\n          0.9508170023106006\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 106
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dfc.head(5)"
      ],
      "metadata": {
        "id": "z2TiKMUqyl6G",
        "outputId": "9aa426ca-554f-450c-afcb-d9341078c321",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        }
      },
      "execution_count": 107,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          H         G\n",
              "0  0.566532 -0.408394\n",
              "1  0.341771 -0.773034\n",
              "2 -0.684044 -0.624842\n",
              "3 -0.063897 -0.811517\n",
              "4 -0.713597 -0.208051"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2e7323be-c5f9-4cd0-8b09-41cb1cfc3e00\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>H</th>\n",
              "      <th>G</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.566532</td>\n",
              "      <td>-0.408394</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.341771</td>\n",
              "      <td>-0.773034</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>-0.684044</td>\n",
              "      <td>-0.624842</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>-0.063897</td>\n",
              "      <td>-0.811517</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>-0.713597</td>\n",
              "      <td>-0.208051</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2e7323be-c5f9-4cd0-8b09-41cb1cfc3e00')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-2e7323be-c5f9-4cd0-8b09-41cb1cfc3e00 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-2e7323be-c5f9-4cd0-8b09-41cb1cfc3e00');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-50521e9f-e525-4907-83ce-bdd2495adcf7\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-50521e9f-e525-4907-83ce-bdd2495adcf7')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-50521e9f-e525-4907-83ce-bdd2495adcf7 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "dfc",
              "summary": "{\n  \"name\": \"dfc\",\n  \"rows\": 500,\n  \"fields\": [\n    {\n      \"column\": \"H\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0060964355619422,\n        \"min\": -3.232381584812308,\n        \"max\": 2.941974357698652,\n        \"num_unique_values\": 500,\n        \"samples\": [\n          -0.6030637494833756,\n          1.5441638317889714,\n          0.9606269190336574\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"G\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.9955748913779482,\n        \"min\": -3.414528739180445,\n        \"max\": 2.9810301642838106,\n        \"num_unique_values\": 500,\n        \"samples\": [\n          1.9640194844062706,\n          0.292730141247064,\n          0.9508170023106006\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 107
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Working with Pandas, and Numpy libraries for Data manipulation in Python\n",
        "\n",
        "pd.set_option('future.no_silent_downcasting', True) # Silence some warnings"
      ],
      "metadata": {
        "id": "jY-Xvb9eMZup"
      },
      "execution_count": 79,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "res1 = pd.merge(left = dfm5, right = dfc, how = \"cross\")"
      ],
      "metadata": {
        "id": "Nas7BavbMcs2"
      },
      "execution_count": 80,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "res1.head(3)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 163
        },
        "id": "saJeYJNsMgZ1",
        "outputId": "a2348a90-dfa9-4c59-ff32-7664e66fd0de"
      },
      "execution_count": 81,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          A         B     C         D        E      Q    a         b  \\\n",
              "0  1.171349 -0.324963  True  0.647244  2.71875  above  0.0  0.003334   \n",
              "1  1.171349 -0.324963  True  0.647244  2.71875  above  0.0  0.003334   \n",
              "2  1.171349 -0.324963  True  0.647244  2.71875  above  0.0  0.003334   \n",
              "\n",
              "          c         d         f         h         H         G  \n",
              "0  0.006669  0.010003  0.013338  0.016672  0.566532 -0.408394  \n",
              "1  0.006669  0.010003  0.013338  0.016672  0.341771 -0.773034  \n",
              "2  0.006669  0.010003  0.013338  0.016672 -0.684044 -0.624842  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d4e58eaf-b4cf-496f-9a75-978146df5199\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>A</th>\n",
              "      <th>B</th>\n",
              "      <th>C</th>\n",
              "      <th>D</th>\n",
              "      <th>E</th>\n",
              "      <th>Q</th>\n",
              "      <th>a</th>\n",
              "      <th>b</th>\n",
              "      <th>c</th>\n",
              "      <th>d</th>\n",
              "      <th>f</th>\n",
              "      <th>h</th>\n",
              "      <th>H</th>\n",
              "      <th>G</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1.171349</td>\n",
              "      <td>-0.324963</td>\n",
              "      <td>True</td>\n",
              "      <td>0.647244</td>\n",
              "      <td>2.71875</td>\n",
              "      <td>above</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.003334</td>\n",
              "      <td>0.006669</td>\n",
              "      <td>0.010003</td>\n",
              "      <td>0.013338</td>\n",
              "      <td>0.016672</td>\n",
              "      <td>0.566532</td>\n",
              "      <td>-0.408394</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1.171349</td>\n",
              "      <td>-0.324963</td>\n",
              "      <td>True</td>\n",
              "      <td>0.647244</td>\n",
              "      <td>2.71875</td>\n",
              "      <td>above</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.003334</td>\n",
              "      <td>0.006669</td>\n",
              "      <td>0.010003</td>\n",
              "      <td>0.013338</td>\n",
              "      <td>0.016672</td>\n",
              "      <td>0.341771</td>\n",
              "      <td>-0.773034</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1.171349</td>\n",
              "      <td>-0.324963</td>\n",
              "      <td>True</td>\n",
              "      <td>0.647244</td>\n",
              "      <td>2.71875</td>\n",
              "      <td>above</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.003334</td>\n",
              "      <td>0.006669</td>\n",
              "      <td>0.010003</td>\n",
              "      <td>0.013338</td>\n",
              "      <td>0.016672</td>\n",
              "      <td>-0.684044</td>\n",
              "      <td>-0.624842</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d4e58eaf-b4cf-496f-9a75-978146df5199')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-d4e58eaf-b4cf-496f-9a75-978146df5199 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-d4e58eaf-b4cf-496f-9a75-978146df5199');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-48db52a1-b8eb-49bf-b949-280135e3006e\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-48db52a1-b8eb-49bf-b949-280135e3006e')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-48db52a1-b8eb-49bf-b949-280135e3006e button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "res1"
            }
          },
          "metadata": {},
          "execution_count": 81
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "res1.to_csv(\"sample_data.csv\", index = False) # saving the data to csv"
      ],
      "metadata": {
        "id": "hBllrxSjMjHD"
      },
      "execution_count": 82,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "mydata = pd.read_csv(\"sample_data.csv\", header = 0)# Loading the data from the directory"
      ],
      "metadata": {
        "id": "Z-_4fai4MmDb"
      },
      "execution_count": 83,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# See what you have loaded\n",
        "mydata.head(10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 383
        },
        "id": "yZwFFhwvMo4T",
        "outputId": "c653e6df-1129-4f62-ad7b-63e9ab31337a"
      },
      "execution_count": 84,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          A         B     C         D      E      Q    a         b         c  \\\n",
              "0  1.171349 -0.324963  True  0.647244  2.719  above  0.0  0.003334  0.006669   \n",
              "1  1.171349 -0.324963  True  0.647244  2.719  above  0.0  0.003334  0.006669   \n",
              "2  1.171349 -0.324963  True  0.647244  2.719  above  0.0  0.003334  0.006669   \n",
              "3  1.171349 -0.324963  True  0.647244  2.719  above  0.0  0.003334  0.006669   \n",
              "4  1.171349 -0.324963  True  0.647244  2.719  above  0.0  0.003334  0.006669   \n",
              "5  1.171349 -0.324963  True  0.647244  2.719  above  0.0  0.003334  0.006669   \n",
              "6  1.171349 -0.324963  True  0.647244  2.719  above  0.0  0.003334  0.006669   \n",
              "7  1.171349 -0.324963  True  0.647244  2.719  above  0.0  0.003334  0.006669   \n",
              "8  1.171349 -0.324963  True  0.647244  2.719  above  0.0  0.003334  0.006669   \n",
              "9  1.171349 -0.324963  True  0.647244  2.719  above  0.0  0.003334  0.006669   \n",
              "\n",
              "          d         f         h         H         G  \n",
              "0  0.010003  0.013338  0.016672  0.566532 -0.408394  \n",
              "1  0.010003  0.013338  0.016672  0.341771 -0.773034  \n",
              "2  0.010003  0.013338  0.016672 -0.684044 -0.624842  \n",
              "3  0.010003  0.013338  0.016672 -0.063897 -0.811517  \n",
              "4  0.010003  0.013338  0.016672 -0.713597 -0.208051  \n",
              "5  0.010003  0.013338  0.016672  0.587819 -0.335970  \n",
              "6  0.010003  0.013338  0.016672 -0.546213  1.018079  \n",
              "7  0.010003  0.013338  0.016672 -0.345940  0.272700  \n",
              "8  0.010003  0.013338  0.016672  0.720747  2.237697  \n",
              "9  0.010003  0.013338  0.016672  1.489531 -0.605535  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ac7eb6f7-18d5-4120-bd8f-5db3f64741d5\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>A</th>\n",
              "      <th>B</th>\n",
              "      <th>C</th>\n",
              "      <th>D</th>\n",
              "      <th>E</th>\n",
              "      <th>Q</th>\n",
              "      <th>a</th>\n",
              "      <th>b</th>\n",
              "      <th>c</th>\n",
              "      <th>d</th>\n",
              "      <th>f</th>\n",
              "      <th>h</th>\n",
              "      <th>H</th>\n",
              "      <th>G</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1.171349</td>\n",
              "      <td>-0.324963</td>\n",
              "      <td>True</td>\n",
              "      <td>0.647244</td>\n",
              "      <td>2.719</td>\n",
              "      <td>above</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.003334</td>\n",
              "      <td>0.006669</td>\n",
              "      <td>0.010003</td>\n",
              "      <td>0.013338</td>\n",
              "      <td>0.016672</td>\n",
              "      <td>0.566532</td>\n",
              "      <td>-0.408394</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1.171349</td>\n",
              "      <td>-0.324963</td>\n",
              "      <td>True</td>\n",
              "      <td>0.647244</td>\n",
              "      <td>2.719</td>\n",
              "      <td>above</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.003334</td>\n",
              "      <td>0.006669</td>\n",
              "      <td>0.010003</td>\n",
              "      <td>0.013338</td>\n",
              "      <td>0.016672</td>\n",
              "      <td>0.341771</td>\n",
              "      <td>-0.773034</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1.171349</td>\n",
              "      <td>-0.324963</td>\n",
              "      <td>True</td>\n",
              "      <td>0.647244</td>\n",
              "      <td>2.719</td>\n",
              "      <td>above</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.003334</td>\n",
              "      <td>0.006669</td>\n",
              "      <td>0.010003</td>\n",
              "      <td>0.013338</td>\n",
              "      <td>0.016672</td>\n",
              "      <td>-0.684044</td>\n",
              "      <td>-0.624842</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1.171349</td>\n",
              "      <td>-0.324963</td>\n",
              "      <td>True</td>\n",
              "      <td>0.647244</td>\n",
              "      <td>2.719</td>\n",
              "      <td>above</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.003334</td>\n",
              "      <td>0.006669</td>\n",
              "      <td>0.010003</td>\n",
              "      <td>0.013338</td>\n",
              "      <td>0.016672</td>\n",
              "      <td>-0.063897</td>\n",
              "      <td>-0.811517</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1.171349</td>\n",
              "      <td>-0.324963</td>\n",
              "      <td>True</td>\n",
              "      <td>0.647244</td>\n",
              "      <td>2.719</td>\n",
              "      <td>above</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.003334</td>\n",
              "      <td>0.006669</td>\n",
              "      <td>0.010003</td>\n",
              "      <td>0.013338</td>\n",
              "      <td>0.016672</td>\n",
              "      <td>-0.713597</td>\n",
              "      <td>-0.208051</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>1.171349</td>\n",
              "      <td>-0.324963</td>\n",
              "      <td>True</td>\n",
              "      <td>0.647244</td>\n",
              "      <td>2.719</td>\n",
              "      <td>above</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.003334</td>\n",
              "      <td>0.006669</td>\n",
              "      <td>0.010003</td>\n",
              "      <td>0.013338</td>\n",
              "      <td>0.016672</td>\n",
              "      <td>0.587819</td>\n",
              "      <td>-0.335970</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>1.171349</td>\n",
              "      <td>-0.324963</td>\n",
              "      <td>True</td>\n",
              "      <td>0.647244</td>\n",
              "      <td>2.719</td>\n",
              "      <td>above</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.003334</td>\n",
              "      <td>0.006669</td>\n",
              "      <td>0.010003</td>\n",
              "      <td>0.013338</td>\n",
              "      <td>0.016672</td>\n",
              "      <td>-0.546213</td>\n",
              "      <td>1.018079</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>1.171349</td>\n",
              "      <td>-0.324963</td>\n",
              "      <td>True</td>\n",
              "      <td>0.647244</td>\n",
              "      <td>2.719</td>\n",
              "      <td>above</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.003334</td>\n",
              "      <td>0.006669</td>\n",
              "      <td>0.010003</td>\n",
              "      <td>0.013338</td>\n",
              "      <td>0.016672</td>\n",
              "      <td>-0.345940</td>\n",
              "      <td>0.272700</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>1.171349</td>\n",
              "      <td>-0.324963</td>\n",
              "      <td>True</td>\n",
              "      <td>0.647244</td>\n",
              "      <td>2.719</td>\n",
              "      <td>above</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.003334</td>\n",
              "      <td>0.006669</td>\n",
              "      <td>0.010003</td>\n",
              "      <td>0.013338</td>\n",
              "      <td>0.016672</td>\n",
              "      <td>0.720747</td>\n",
              "      <td>2.237697</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>1.171349</td>\n",
              "      <td>-0.324963</td>\n",
              "      <td>True</td>\n",
              "      <td>0.647244</td>\n",
              "      <td>2.719</td>\n",
              "      <td>above</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.003334</td>\n",
              "      <td>0.006669</td>\n",
              "      <td>0.010003</td>\n",
              "      <td>0.013338</td>\n",
              "      <td>0.016672</td>\n",
              "      <td>1.489531</td>\n",
              "      <td>-0.605535</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ac7eb6f7-18d5-4120-bd8f-5db3f64741d5')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-ac7eb6f7-18d5-4120-bd8f-5db3f64741d5 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-ac7eb6f7-18d5-4120-bd8f-5db3f64741d5');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-1cd50cc8-03ed-4d10-aad6-8cf036bdf992\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1cd50cc8-03ed-4d10-aad6-8cf036bdf992')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-1cd50cc8-03ed-4d10-aad6-8cf036bdf992 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "mydata"
            }
          },
          "metadata": {},
          "execution_count": 84
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "D1 = pd.DataFrame(data = np.arange(10).reshape(5, 2), columns = [\"A\", \"B\"])\n",
        "D2 = pd.DataFrame(data = np.arange(6).reshape(3, 2), columns = [\"A\", \"B\"])"
      ],
      "metadata": {
        "id": "kPQkmqSUMusZ"
      },
      "execution_count": 85,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "D1"
      ],
      "metadata": {
        "id": "qOhVbREZzEWS",
        "outputId": "4a20d012-7abb-467c-ed9a-36d141049b42",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        }
      },
      "execution_count": 108,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   A  B\n",
              "0  0  1\n",
              "1  2  3\n",
              "2  4  5\n",
              "3  6  7\n",
              "4  8  9"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-936fec92-c84c-4d55-abb9-268075d24231\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>A</th>\n",
              "      <th>B</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>4</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>6</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>8</td>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-936fec92-c84c-4d55-abb9-268075d24231')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-936fec92-c84c-4d55-abb9-268075d24231 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-936fec92-c84c-4d55-abb9-268075d24231');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-fb163a9d-8fb2-4a74-ae3d-0a414defe8ce\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-fb163a9d-8fb2-4a74-ae3d-0a414defe8ce')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-fb163a9d-8fb2-4a74-ae3d-0a414defe8ce button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_f67ded96-5416-493d-a5e0-43a0eb86d744\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('D1')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_f67ded96-5416-493d-a5e0-43a0eb86d744 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('D1');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "D1",
              "summary": "{\n  \"name\": \"D1\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"A\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 0,\n        \"max\": 8,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          2,\n          8,\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"B\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 1,\n        \"max\": 9,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          3,\n          9,\n          5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 108
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "D2"
      ],
      "metadata": {
        "id": "oFx7JI00zIo7",
        "outputId": "a13792fd-f5a7-4de7-efd4-7f81a5c903b6",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 143
        }
      },
      "execution_count": 109,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   A  B\n",
              "0  0  1\n",
              "1  2  3\n",
              "2  4  5"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-dd8265df-360a-4739-bfdd-cea1dffd22a6\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>A</th>\n",
              "      <th>B</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>4</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-dd8265df-360a-4739-bfdd-cea1dffd22a6')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-dd8265df-360a-4739-bfdd-cea1dffd22a6 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-dd8265df-360a-4739-bfdd-cea1dffd22a6');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-ac5b60d6-2930-4208-b1b0-89e36b900794\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ac5b60d6-2930-4208-b1b0-89e36b900794')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-ac5b60d6-2930-4208-b1b0-89e36b900794 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_147dd23f-6d57-4893-b389-39bbd8c2c983\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('D2')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_147dd23f-6d57-4893-b389-39bbd8c2c983 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('D2');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "D2",
              "summary": "{\n  \"name\": \"D2\",\n  \"rows\": 3,\n  \"fields\": [\n    {\n      \"column\": \"A\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 0,\n        \"max\": 4,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          0,\n          2,\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"B\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 1,\n        \"max\": 5,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          1,\n          3,\n          5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 109
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Merging samples\n",
        "D_merge = pd.concat([D1, D2], axis = 0)"
      ],
      "metadata": {
        "id": "7G4JlJBDM0tv"
      },
      "execution_count": 86,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Simulate a dataset of 30 patients with the following columns:\n",
        "\t•\tPatientID: Unique ID\n",
        "\t•\tAge: Continuous (random between 18 and 90)\n",
        "\t•\tGender: Randomly chosen from [‘Male’, ‘Female’]\n",
        "\t•\tBloodPressure: Normally distributed, mean=120, std=15\n",
        "\t•\tDiabetes: Binary (0/1)\n",
        "\t•\tCholesterol: Continuous (random between 150–300)"
      ],
      "metadata": {
        "id": "N5xNXVr8M6iD"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "🧪 Tasks:\n",
        "\n",
        "✅ NumPy Part:\n",
        "\t1.\tGenerate Age, BloodPressure, and Cholesterol columns using NumPy.\n",
        "\t2.\tCalculate and print:\n",
        "\t•\tMean and standard deviation of BloodPressure\n",
        "\t•\tIndexes of patients with BP > 140\n",
        "\n",
        "✅ Pandas Part:\n",
        "\t3.\tCreate a DataFrame with all columns.\n",
        "\t4.\tConvert Diabetes into a categorical column with labels: 'No' (0) and 'Yes' (1)\n",
        "\t5.\tCategorize Age into:\n",
        "\t•\t'Young': < 35\n",
        "\t•\t'Middle-aged': 35–60\n",
        "\t•\t'Senior': > 60\n",
        "\t6.\tFind the average cholesterol level grouped by both Gender and Diabetes\n",
        "\t7.\tSort the data by BloodPressure in descending order and show top 5 patients.\n",
        "\t8.\tDrop any row where Cholesterol is above 280 (assume it’s an outlier).\n",
        "\t9.\tSave the cleaned DataFrame to a CSV file (e.g., \"cleaned_patients.csv\")."
      ],
      "metadata": {
        "id": "k_NJx351Nnuc"
      }
    }
  ]
}